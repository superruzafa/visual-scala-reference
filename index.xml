<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Scala Reference</title><link>https://superruzafa.github.io/visual-scala-reference/</link><description>Recent content on Visual Scala Reference</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://superruzafa.github.io/visual-scala-reference/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://superruzafa.github.io/visual-scala-reference/contributors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/contributors/</guid><description>lkjlk</description></item><item><title>aggregate</title><link>https://superruzafa.github.io/visual-scala-reference/aggregate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/aggregate/</guid><description>aggregate trait Collection[A] { def aggregate[B](z: =&amp;gt; B)(seqop: (B, A) =&amp;gt; B, combop: (B, B) =&amp;gt; B): B } aggregate applies the binary operator seqop to chunks of elements and then combines the intermediate results using the binary operator combop. The value z is the zero element for the type B and may be used multiple times.</description></item><item><title>andThen</title><link>https://superruzafa.github.io/visual-scala-reference/andThen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/andThen/</guid><description>andThen trait Function1[X, Y] { def andThen[Z](g: (Y) =&amp;gt; Z): (X) =&amp;gt; Z } andThen creates an anonymous function that accepts a value and returns the result of applying this function first and then g to that value.</description></item><item><title>appended</title><link>https://superruzafa.github.io/visual-scala-reference/appended/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/appended/</guid><description>appended trait Collection[A] { def appended[B &amp;gt;: A](b: B): Collection[B] def :+[B &amp;gt;: A](b: B): Collection[B] } appended creates a copy of this collection by adding the element b at the end.</description></item><item><title>appendedAll</title><link>https://superruzafa.github.io/visual-scala-reference/appendedAll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/appendedAll/</guid><description>appendedAll trait Collection[A] { def appendedAll[B &amp;gt;: A](bs: Collection[B]): Collection[B] def :++[B &amp;gt;: A](bs: Collection[B]): Collection[B] } appendedAll creates a copy of this collection by adding the collection bs at the end.</description></item><item><title>chain</title><link>https://superruzafa.github.io/visual-scala-reference/chain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/chain/</guid><description>chain object Function { def chain[X](fs: Collection[(X) =&amp;gt; X]): (X) =&amp;gt; X } chain creates an anonymous function that accepts a value and returns the result of sequentially applying all the functions contained in the collection fs.</description></item><item><title>collect</title><link>https://superruzafa.github.io/visual-scala-reference/collect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/collect/</guid><description>collect trait Collection[A] { def collect[B](f: PartialFunction[A, B]): Collection[B] } collect builds a collection using as elements the result of applying the partial function f to those elements for which f is defined and discarding the rest of elements.</description></item><item><title>collectFirst</title><link>https://superruzafa.github.io/visual-scala-reference/collectFirst/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/collectFirst/</guid><description>collectFirst trait Collection[A] { def collectFirst[B](f: PartialFunction[A, B]): Option[B] } collectFirst applies the partial function f to the first element in this collection for which f is defined and returns its result wrapped with Some.
If the partial function f is not defined for any element in this collection then None is returned.</description></item><item><title>combinations</title><link>https://superruzafa.github.io/visual-scala-reference/combinations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/combinations/</guid><description>combinations trait Collection[A] { def combinations(k: Int): Iterator[Collection[A]] } combinations computes all the possible combinations of this collection&amp;rsquo;s elements taking k elements at a time and returns an Iterator to iterate them.</description></item><item><title>compose</title><link>https://superruzafa.github.io/visual-scala-reference/compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/compose/</guid><description>compose trait Function1[X, Y] { def compose[Z](g: (Z) =&amp;gt; X): (Z) =&amp;gt; Y } compose creates an anonymous function that accepts a value and returns the result of applying the function g first and then this function to that value.</description></item><item><title>concat</title><link>https://superruzafa.github.io/visual-scala-reference/concat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/concat/</guid><description>concat object Collection { def concat[A](as: Collection[A]*): Collection[A] } concat accepts any arbitrary number of collections and uses their elements to create a single collection.</description></item><item><title>cond</title><link>https://superruzafa.github.io/visual-scala-reference/cond/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/cond/</guid><description>cond object PartialFunction { def cond[X](x: X)(pf: PartialFunction[X, Boolean]): Boolean } cond accepts the value x and creates an anonymous partial function that in turn accepts the partial function pf, applies it to x and returns the same value that pf does.
If pf is not defined for the input value x then the anonymous function returns false.</description></item><item><title>condOpt</title><link>https://superruzafa.github.io/visual-scala-reference/condOpt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/condOpt/</guid><description>condOpt object PartialFunction { def condOpt[X, Y](x: X)(pf: PartialFunction[X, Y]): Option[Y] } condOpt accepts the value x and creates an anonymous partial function that in turn accepts the partial function pf, applies it to x and returns a Some wrapping the value returned by pf.
If pf is not defined for the input value x then the anonymous function returns None.</description></item><item><title>const</title><link>https://superruzafa.github.io/visual-scala-reference/const/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/const/</guid><description>const object Function { def const[X, Y](x: X)(y: Y): X } const accepts a value x and creates an anonymous function that returns that value x given any input value y.</description></item><item><title>contains</title><link>https://superruzafa.github.io/visual-scala-reference/contains/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/contains/</guid><description>contains trait Collection[A] { def contains(a: A): Boolean } contains checks whether a given value a equals (==) at least one element in this collection, returning true if so.
If no element is equal to that value then contains returns false.</description></item><item><title>containsSlice</title><link>https://superruzafa.github.io/visual-scala-reference/containsSlice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/containsSlice/</guid><description>containsSlice trait Collection[A] { def containsSlice(as: Collection[A]): Boolean } containsSlice checks whether the collection as can be found as a slice in this collection, returning true if so.
If the collection as cannot be found as a slice in this collection then this function returns false.</description></item><item><title>copyToArray</title><link>https://superruzafa.github.io/visual-scala-reference/copyToArray/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/copyToArray/</guid><description>copyToArray trait Collection[A] { def copyToArray[B :&amp;gt; A](array: Array[B]): Int def copyToArray[B :&amp;gt; A](array: Array[B], i: Int): Int def copyToArray[B :&amp;gt; A](array: Array[B], i: Int, l: Int): Int } copyToArray copies elements from this collection to an Array and returns how many elements were copied.
The copy can be placed in the target Array at a given offset i.
Also the copy can be restricted to, as much, the first l elements.</description></item><item><title>corresponds</title><link>https://superruzafa.github.io/visual-scala-reference/corresponds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/corresponds/</guid><description>corresponds trait Collection[A] { def corresponds[B](bs: Collection[B])(p: (A, B) =&amp;gt; Boolean): Boolean } corresponds checks that the predicate p is satisfied for every pair of elements occupying the same index in this and the bs collection, returning true if so.
If at least a pair of elements do not satisfy p or there are unpaired elements then this function returns false.</description></item><item><title>count</title><link>https://superruzafa.github.io/visual-scala-reference/count/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/count/</guid><description>count trait Collection[A] { def count(p: (A) =&amp;gt; Boolean): Int } count determines how many elements in this collection satisfy the predicate p.</description></item><item><title>curried</title><link>https://superruzafa.github.io/visual-scala-reference/curried/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/curried/</guid><description>curried trait Function[X1, X2..., Xn, Y] { def curried: (X1) =&amp;gt; (X2) =&amp;gt; ... =&amp;gt; (Xn) =&amp;gt; Y } curried creates an equivalent anonymous function to process the first parameter of this function. In turn, this anonymous function returns another anonymous function to process the second parameter of this function, and so on&amp;hellip; until all parameters have been processed and the final result has been calculated.</description></item><item><title>diff</title><link>https://superruzafa.github.io/visual-scala-reference/diff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/diff/</guid><description>diff trait Collection[A] { def diff(as: Collection[A]): Collection[A] } diff computes the multiset difference between this and the as collection.</description></item><item><title>distinct</title><link>https://superruzafa.github.io/visual-scala-reference/distinct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/distinct/</guid><description>distinct trait Collection[A] { def distinct: Collection[A] } distinct creates a copy of this collection without duplicated elements.</description></item><item><title>distinctBy</title><link>https://superruzafa.github.io/visual-scala-reference/distinctBy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/distinctBy/</guid><description>distinctBy trait Seq[A] { def distinctBy[K](f: (A) =&amp;gt; K): Seq[A] } distinctBy creates a copy of this collection by keeping only one of the elements that yield the same key after applying the function f to them.</description></item><item><title>drop</title><link>https://superruzafa.github.io/visual-scala-reference/drop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/drop/</guid><description>drop trait Collection[A] { def drop(i: Int): Collection[A] } drop creates a collection by discarding the first i elements of this collection and keeping the rest.</description></item><item><title>dropRight</title><link>https://superruzafa.github.io/visual-scala-reference/dropRight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/dropRight/</guid><description>dropRight trait Collection[A] { def dropRight(i: Int): Collection[A] } dropRight creates a collection by discarding the last i elements of this collection and keeping the rest.</description></item><item><title>dropWhile</title><link>https://superruzafa.github.io/visual-scala-reference/dropWhile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/dropWhile/</guid><description>dropWhile trait Collection[A] { def dropWhile(p: (A) =&amp;gt; Boolean): Collection[A] } dropWhile creates a collection by discarding the longest prefix of elements that satisfy a predicate p and keeping the rest.</description></item><item><title>empty (collections)</title><link>https://superruzafa.github.io/visual-scala-reference/empty_collections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/empty_collections/</guid><description>empty For the PartialFunction's empty function go here.
object Collection { def empty[A]: Collection[A] } empty creates a collection to contain elements of type A but without any element.</description></item><item><title>empty (PartialFunction)</title><link>https://superruzafa.github.io/visual-scala-reference/empty_PartialFunction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/empty_PartialFunction/</guid><description>empty For the collections&amp;rsquo; empty function go here.
object PartialFunction { def empty[A, B]: PartialFunction[A, B] } empty creates an anonymous partial function which is not defined for any value.</description></item><item><title>endsWith</title><link>https://superruzafa.github.io/visual-scala-reference/endsWith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/endsWith/</guid><description>endsWith trait Collection[A] { def endsWith(as: Collection[A]): Boolean } endsWith checks whether the collection as is a suffix of this collection, returning true if so.
If as is not a suffix of this collection then this function returns false.</description></item><item><title>exists</title><link>https://superruzafa.github.io/visual-scala-reference/exists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/exists/</guid><description>exists trait Collection[A] { def exists(p: (A) =&amp;gt; Boolean): Boolean } exists checks whether at least one element in this collection satisfy the predicate p, returning true if such element exists.
On empty collections the predicate p cannot be satisfied at least once, hence this function returns false.</description></item><item><title>fill</title><link>https://superruzafa.github.io/visual-scala-reference/fill/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/fill/</guid><description>fill object Collection { def fill[A](n1: Int, ..., nm: Int)(a: =&amp;gt; A): Collection[ ... Collection[A] ... ] } fill creates an n-dimensional collection containing the result of some computation a.</description></item><item><title>filter</title><link>https://superruzafa.github.io/visual-scala-reference/filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/filter/</guid><description>filter trait Collection[A] { def filter(p: (A) =&amp;gt; Boolean): Collection[A] } filter creates a collection with those elements that satisfy the predicate p and discarding the rest.</description></item><item><title>filterKeys</title><link>https://superruzafa.github.io/visual-scala-reference/filterKeys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/filterKeys/</guid><description>filterKeys trait Map[K, V] { def filterKeys(p: (K) =&amp;gt; Boolean): Map[K, V] } filterKeys creates a Map with those key-value pairs whose key satisfy the predicate p and discarding the rest.</description></item><item><title>filterNot</title><link>https://superruzafa.github.io/visual-scala-reference/filterNot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/filterNot/</guid><description>filterNot trait Collection[A] { def filterNot(p: (A) =&amp;gt; Boolean): Collection[A] } filterNot creates a collection with those elements that do not satisfy the predicate p and discarding the rest.</description></item><item><title>find</title><link>https://superruzafa.github.io/visual-scala-reference/find/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/find/</guid><description>find trait Collection[A] { def find(p: (A) =&amp;gt; Boolean): Option[A] } find returns the first element that satisfy the predicate p, wrapped with Some.
If no element in this collection satisfy p then this function returns None.</description></item><item><title>findLast</title><link>https://superruzafa.github.io/visual-scala-reference/findLast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/findLast/</guid><description>findLast trait Collection[A] { def findLast(p: (A) =&amp;gt; Boolean): Option[A] } findLast returns the last element that satisfy the predicate p, wrapped with Some.
If no element in this collection satisfy p then this function returns None.</description></item><item><title>flatMap</title><link>https://superruzafa.github.io/visual-scala-reference/flatMap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/flatMap/</guid><description>flatMap trait Collection[A] { def flatMap(f: (A) =&amp;gt; Collection[B]): Collection[B] } flatMap creates a collection by applying the function f to each element and using the resulting subelements as elements of the new collection.</description></item><item><title>flatten</title><link>https://superruzafa.github.io/visual-scala-reference/flatten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/flatten/</guid><description>flatten trait Collection[A] { def flatten[B]: Collection[B] } flatten creates a collection by using the elements of this collection&amp;rsquo;s subcollections.</description></item><item><title>fold</title><link>https://superruzafa.github.io/visual-scala-reference/fold/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/fold/</guid><description>fold trait Collection[A] { def fold(z: A)(op: (A, A) =&amp;gt; A): A } fold applies the binary operator op to pairs of elements in this collection until the final result is calculated. The zero element z can be used multiple times.</description></item><item><title>foldLeft</title><link>https://superruzafa.github.io/visual-scala-reference/foldLeft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/foldLeft/</guid><description>foldLeft trait Collection[A] { def foldLeft[B](z: B)(op: (B, A) =&amp;gt; B): B } foldLeft applies, going from left to right, the binary operator op to each element and the previous op result. The first time op is applied it&amp;rsquo;s fed with the initial value z.
On empty collections this function doesn&amp;rsquo;t apply op and the initial value z is directly returned.</description></item><item><title>foldRight</title><link>https://superruzafa.github.io/visual-scala-reference/foldRight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/foldRight/</guid><description>foldRight trait Collection[A] { def foldRight[B](z: B)(op: (A, B) =&amp;gt; B): B } foldRight applies the binary operator op to each element, going from right to left, and the previous op result. The first time op is applied it&amp;rsquo;s fed with the initial value z.
On empty collections this function doesn&amp;rsquo;t apply op and the initial value z is directly returned.</description></item><item><title>forall</title><link>https://superruzafa.github.io/visual-scala-reference/forall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/forall/</guid><description>forall trait Collection[A] { def forall(p: (A) =&amp;gt; Boolean): Boolean } forall checks whether all elements in this collection satisfy the predicate p, returning false if p doesn&amp;rsquo;t stand for at least one element.
On empty collections there is no element which doesn&amp;rsquo;t satisfy p, hence this function returns true.</description></item><item><title>foreach</title><link>https://superruzafa.github.io/visual-scala-reference/foreach/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/foreach/</guid><description>foreach trait Collection[A] { def foreach(f: (A) =&amp;gt; Unit): Unit } foreach applies the function f to each element in this collection, discarding any result. This function returns ().</description></item><item><title>fromFunction</title><link>https://superruzafa.github.io/visual-scala-reference/fromFunction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/fromFunction/</guid><description>fromFunction object PartialFunction { def fromFunction[X, Y](f: (X) =&amp;gt; Y): PartialFunction[X, Y] } fromFunction creates an anonymous partial function from a total function.</description></item><item><title>getOrElse (Map)</title><link>https://superruzafa.github.io/visual-scala-reference/getOrElse_Map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/getOrElse_Map/</guid><description>getOrElse For the Option's getOrElse function go here.
trait Map[K, V] { def getOrElse(k: K, v: =&amp;gt; V): V } getOrElse returns the value associated to the key k in this Map.
If this Map doesn&amp;rsquo;t contain the key k then this function returns the result of the computation v.</description></item><item><title>getOrElse (Option)</title><link>https://superruzafa.github.io/visual-scala-reference/getOrElse_Option/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/getOrElse_Option/</guid><description>getOrElse For the Map's getOrElse function go here.
trait Option[A] { def getOrElse[B &amp;gt;: A](b: =&amp;gt; B): B } getOrElse returns the wrapped value when this Option is Some.
When this Option is None the default value b is returned.</description></item><item><title>groupBy</title><link>https://superruzafa.github.io/visual-scala-reference/groupBy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/groupBy/</guid><description>groupBy trait Collection[A] { def groupBy[K](f: (A) =&amp;gt; K): Map[K, Collection[A]] } groupBy creates a Map by grouping the elements under the key they yield when the function f is applied to them.</description></item><item><title>grouped</title><link>https://superruzafa.github.io/visual-scala-reference/grouped/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/grouped/</guid><description>grouped trait Collection[A] { def grouped(m: Int): Iterator[Collection[A]] } grouped splits this collection in smaller subcollections of, as much, m elements and returns an Iterator to iterate them.</description></item><item><title>groupMap</title><link>https://superruzafa.github.io/visual-scala-reference/groupMap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/groupMap/</guid><description>groupMap trait Collection[A] { def groupMap[K, B](f: (A) =&amp;gt; K)(g: (A) =&amp;gt; B): Map[K, Collection[B]] } groupMap creates a Map by grouping the elements under the key they yield when the function f is applied to them and then applying the transformation function g.</description></item><item><title>groupMapReduce</title><link>https://superruzafa.github.io/visual-scala-reference/groupMapReduce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/groupMapReduce/</guid><description>groupMapReduce trait Collection[A] { def groupMapReduce[K, B](k: (A) =&amp;gt; K)(f: (A) =&amp;gt; B)(op: (B, B) =&amp;gt; B): Map[K, B] } groupMapReduce creates a Map by grouping the elements under the key yielded by the function k when it&amp;rsquo;s applied to them, applying the transformation function f to the grouped elements and finally reducing the transformed elements using the associative binary operator op.</description></item><item><title>head</title><link>https://superruzafa.github.io/visual-scala-reference/head/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/head/</guid><description>head trait Collection[A] { def head: A } head returns the first element of this collection.
On empty collections this function throws a NoSuchElementException exception.</description></item><item><title>headOption</title><link>https://superruzafa.github.io/visual-scala-reference/headOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/headOption/</guid><description>headOption trait Collection[A] { def headOption: Option[A] } headOption returns the first element of this collection, wrapped with Some.
On empty collections when there is no first element this function returns None.</description></item><item><title>indexOf</title><link>https://superruzafa.github.io/visual-scala-reference/indexOf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/indexOf/</guid><description>indexOf trait Collection[A] { def indexOf(a: A): Int def indexOf(a: A, j: Int): Int } indexOf returns the index of the first element that equals (==) the value a.
The search can start at the given offset j.
If no element equals a then this function returns -1.</description></item><item><title>indexOfSlice</title><link>https://superruzafa.github.io/visual-scala-reference/indexOfSlice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/indexOfSlice/</guid><description>indexOfSlice trait Collection[A] { def indexOfSlice(as: Collection[A]): Int def indexOfSlice(as: Collection[A], j: Int): Int } indexOfSlice returns the index of the first element where the collection as can be found as a slice.
The search can start at the given offset j.
If as cannot be found as a slice in this collection then this function returns -1.</description></item><item><title>indexWhere</title><link>https://superruzafa.github.io/visual-scala-reference/indexWhere/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/indexWhere/</guid><description>indexWhere trait Collection[A] { def indexWhere(p: (A) =&amp;gt; Boolean): Int def indexWhere(p: (A) =&amp;gt; Boolean: j: Int): Int } indexWhere returns the index of the first element that satisfy the predicate p.
The search can start at the given offset j.
If no element satisfy p then this function returns -1.</description></item><item><title>indices</title><link>https://superruzafa.github.io/visual-scala-reference/indices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/indices/</guid><description>indices trait Collection[A] { def indices: Range } indices creates a Range with the indices used by this collection.</description></item><item><title>init</title><link>https://superruzafa.github.io/visual-scala-reference/init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/init/</guid><description>init trait Collection[A] { def init: Collection[A] } init returns all but the last element of this collection.
On empty collections this function throws a UnsupportedOperationException exception.</description></item><item><title>inits</title><link>https://superruzafa.github.io/visual-scala-reference/inits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/inits/</guid><description>inits trait Collection[A] { def inits: Iterator[Collection[A]] } inits computes all possible prefixes of this collection and returns an Iterator to iterate them.</description></item><item><title>intersect</title><link>https://superruzafa.github.io/visual-scala-reference/intersect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/intersect/</guid><description>intersect trait Collection[A] { def intersect(as: Collection[A]): Collection[A] } intersect computes the multiset intersection between this and the as collection.</description></item><item><title>isDefinedAt (Map)</title><link>https://superruzafa.github.io/visual-scala-reference/isDefinedAt_Map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/isDefinedAt_Map/</guid><description>isDefinedAt For the Seq's isDefinedAt function go here.
trait Map[K, V] { def isDefinedAt(k: K): Boolean } isDefinedAt checks whether this Map contains any element with a given key k, returning true if so.
When there is no element defined with key k this function returns false.</description></item><item><title>isDefinedAt (Seq)</title><link>https://superruzafa.github.io/visual-scala-reference/isDefinedAt_Seq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/isDefinedAt_Seq/</guid><description>isDefinedAt For the Map's isDefinedAt function go here.
trait Seq[A] { def isDefinedAt(i: Int): Boolean } isDefinedAt checks whether a Seq contains any element at a given index i, returning true if so.
When there is no element defined at index i this function returns false.</description></item><item><title>isEmpty</title><link>https://superruzafa.github.io/visual-scala-reference/isEmpty/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/isEmpty/</guid><description>isEmpty trait Collection[A] { def isEmpty: Boolean } isEmpty checks whether this collection has no elements and returns false otherwise.
It only returns true on empty collections.</description></item><item><title>isTraversableAgain</title><link>https://superruzafa.github.io/visual-scala-reference/isTraversableAgain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/isTraversableAgain/</guid><description>isTraversableAgain trait Collection[A] { def isTraversableAgain: Boolean } isTraversableAgain checks whether this collection can be traversed once and again and returns true if so.
If the collection cannot be traversed multiple times then this function returns false.</description></item><item><title>keys</title><link>https://superruzafa.github.io/visual-scala-reference/keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/keys/</guid><description>keys trait Map[K, V] { def keys: Iterable[V] } keys creates an Iterator to iterate this Map's keys.</description></item><item><title>last</title><link>https://superruzafa.github.io/visual-scala-reference/last/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/last/</guid><description>last trait Collection[A] { def last: A } last returns the last element in this collection.
On empty collections this function throws a NoSuchElementException exception.</description></item><item><title>lastIndexOf</title><link>https://superruzafa.github.io/visual-scala-reference/lastIndexOf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/lastIndexOf/</guid><description>lastIndexOf trait Collection[A] { def lastIndexOf(a: A): Int def lastIndexOf(a: A, j: Int): Int } lastIndexOf returns the index of the last element that equals (==) the value a.
The search can start at the given offset j.
If no element equals a then this function returns -1.</description></item><item><title>lastIndexOfSlice</title><link>https://superruzafa.github.io/visual-scala-reference/lastIndexOfSlice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/lastIndexOfSlice/</guid><description>lastIndexOfSlice trait Collection[A] { def lastIndexOfSlice(as: Collection[A]): Int def lastIndexOfSlice(as: Collection[A], j: Int): Int } lastIndexOfSlice returns the index of the last element where the collection as can be found as a slice.
The search can start at the given offset j.
If as cannot be found as a slice in this collection then this function returns -1.</description></item><item><title>lastIndexWhere</title><link>https://superruzafa.github.io/visual-scala-reference/lastIndexWhere/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/lastIndexWhere/</guid><description>lastIndexWhere trait Collection[A] { def lastIndexWhere(p: (A) =&amp;gt; Boolean): Int def lastIndexWhere(p: (A) =&amp;gt; Boolean: j: Int): Int } lastIndexWhere returns the index of the last element that satisfy the predicate p.
The search can start at the given offset j.
If no element satisfy p then this function returns -1.</description></item><item><title>lastOption</title><link>https://superruzafa.github.io/visual-scala-reference/lastOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/lastOption/</guid><description>lastOption trait Collection[A] { def lastOption: Option[A] } lastOption returns the last element of this collection, wrapped with Some.
On empty collections when there is no last element this function returns None.</description></item><item><title>length</title><link>https://superruzafa.github.io/visual-scala-reference/length/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/length/</guid><description>length trait Collection[A] { def length: Int } length returns how many elements this collection has.</description></item><item><title>lift</title><link>https://superruzafa.github.io/visual-scala-reference/lift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/lift/</guid><description>lift trait PartialFunction[X, Y] { def lift: (X) =&amp;gt; Option[Y] } lift creates an anonymous function that wraps with Some the value returned by this partial function if it&amp;rsquo;s defined for the given input value.
For those input values for which this partial function is not defined, the anonymous function will return None.</description></item><item><title>map</title><link>https://superruzafa.github.io/visual-scala-reference/map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/map/</guid><description>map trait Collection[A] { def map[B](f: (A) =&amp;gt; B): Collection[B] } map creates a collection using as elements the results obtained from applying the function f to each element of this collection.</description></item><item><title>mapConserve</title><link>https://superruzafa.github.io/visual-scala-reference/mapConserve/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/mapConserve/</guid><description>mapConserve trait List[A] { def mapConserve[B &amp;gt;: A](f: (A) =&amp;gt; B): List[B] } mapConserve applies the function f to each element of this List and returns it untouched if every transformed element is equal (in terms of eq) to the element it was retrieved from.
If at least one transformed element is not equal (in terms of eq) to its source element then this function creates a new List built from the transformed results.</description></item><item><title>mapValues</title><link>https://superruzafa.github.io/visual-scala-reference/mapValues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/mapValues/</guid><description>mapValues trait Map[K, V] { def mapValues[W](f: (V) =&amp;gt; W): Map[K, W] } mapValues creates a Map with the same keys from this Map but transforming each key&amp;rsquo;s value using the function f.</description></item><item><title>max</title><link>https://superruzafa.github.io/visual-scala-reference/max/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/max/</guid><description>max trait Collection[A] { def max: A } max returns the largest value in this collection.
On empty collections this function throws a UnsupportedOperationException exception.</description></item><item><title>maxBy</title><link>https://superruzafa.github.io/visual-scala-reference/maxBy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/maxBy/</guid><description>maxBy trait Collection[A] { def maxBy[W](f: (A) =&amp;gt; W): A } maxBy applies f to each element and returns the element that yields the largest value.
On empty collections this function throws a UnsupportedOperationException exception.</description></item><item><title>maxByOption</title><link>https://superruzafa.github.io/visual-scala-reference/maxByOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/maxByOption/</guid><description>maxByOption trait Collection[A] { def maxByOption[W](f: (A) =&amp;gt; W): A } maxByOption applies f to each element and returns the element that yields the largest value wrapped with Some.
On empty collections this function returns None.</description></item><item><title>maxOption</title><link>https://superruzafa.github.io/visual-scala-reference/maxOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/maxOption/</guid><description>maxOption trait Collection[A] { def maxOption: Option[A] } maxOption returns the largest value in this collection wrapped with Some.
On empty collections this function returns None.</description></item><item><title>min</title><link>https://superruzafa.github.io/visual-scala-reference/min/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/min/</guid><description>min trait Collection[A] { def min: A } min returns the smallest value in this collection.
On empty collections min throws a UnsupportedOperationException exception.</description></item><item><title>minBy</title><link>https://superruzafa.github.io/visual-scala-reference/minBy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/minBy/</guid><description>minBy trait Collection[A] { def minBy[W](f: (A) =&amp;gt; W): A } minBy applies f to each element and returns the element that yields the smallest value.
On empty collections minBy throws a UnsupportedOperationException exception.</description></item><item><title>minByOption</title><link>https://superruzafa.github.io/visual-scala-reference/minByOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/minByOption/</guid><description>minByOption trait Collection[A] { def minByOption[W](f: (A) =&amp;gt; W): A } minByOption applies f to each element and returns the element that yields the smallest value wrapped with Some.
On empty collections minByOption returns None.</description></item><item><title>minOption</title><link>https://superruzafa.github.io/visual-scala-reference/minOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/minOption/</guid><description>minOption trait Collection[A] { def minOption: Option[A] } minOption returns the smallest value in this collection wrapped with Some.
On empty collections minOption returns None.</description></item><item><title>mkString</title><link>https://superruzafa.github.io/visual-scala-reference/mkString/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/mkString/</guid><description>mkString trait Collection[A] { def mkString: String def mkString(sep: String): String def mkString(start: String, sep: String, end: String): String } mkString builds a String by joining the string representation of each element of this collection. Optionally sep can be used as a glue for the parts while start/end can be used as a starting/ending strings, respectively.</description></item><item><title>nonEmpty</title><link>https://superruzafa.github.io/visual-scala-reference/nonEmpty/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/nonEmpty/</guid><description>nonEmpty trait Collection[A] { def nonEmpty: Boolean } nonEmpty returns true when this collection has at least one element.
On empty collections this function return false.</description></item><item><title>orElse</title><link>https://superruzafa.github.io/visual-scala-reference/orElse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/orElse/</guid><description>orElse trait PartialFunction[X, Y] { def orElse(g: PartialFunction[X, Y]): PartialFunction[X, Y] } orElse creates an anonymous partial function that returns the value this partial function does.
For those input values for which this partial function is not defined, the anonymous partial function returns the value returned by g.
If neither this function or g are defined for the input value, the anonymous function throws a MatchError exception.</description></item><item><title>padTo</title><link>https://superruzafa.github.io/visual-scala-reference/padTo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/padTo/</guid><description>padTo trait Collection[A] { def padTo(m: Int, a: A): Collection[A] } padTo creates a copy of this collection and pads it to the right with the value a until some length m is reached.</description></item><item><title>partition</title><link>https://superruzafa.github.io/visual-scala-reference/partition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/partition/</guid><description>partition trait Collection[A] { def partition(p: (A) =&amp;gt; Boolean): (Collection[A], Collection[A]) } partition creates two collections: one containing those elements that satisfy the predicate p and those which don&amp;rsquo;t, and returns them in a Tuple2.</description></item><item><title>partitionMap</title><link>https://superruzafa.github.io/visual-scala-reference/partitionMap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/partitionMap/</guid><description>partitionMap trait Collection[A] { def partitionMap[B, C](f: (A) =&amp;gt; Either[B, C]): (Collection[B], Collection[C]) } partitionMap creates two collections by applying the function f to each element in the collection and classifying the transformed values depending on whether they were wrapped with Left or Right.</description></item><item><title>patch</title><link>https://superruzafa.github.io/visual-scala-reference/patch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/patch/</guid><description>patch trait Collection[A] { def patch(j: Int, bs: Collection[A], m: Int): Collection[A] } patch creates a copy of this collection but replaces the m elements starting at the index j by the collection bs.</description></item><item><title>permutations</title><link>https://superruzafa.github.io/visual-scala-reference/permutations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/permutations/</guid><description>permutations trait Collection[A] { def permutations: Iterator[Collection[A]] } permutations computes all the possible permutations of this collection and returns an Iterator to iterate them.</description></item><item><title>prefixLength</title><link>https://superruzafa.github.io/visual-scala-reference/prefixLength/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/prefixLength/</guid><description>prefixLength trait Collection[A] { def prefixLength(p: (A) =&amp;gt; Boolean): Int } prefixLength returns the length of the largest prefix of elements that satisfy the predicate p.</description></item><item><title>prepended</title><link>https://superruzafa.github.io/visual-scala-reference/prepended/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/prepended/</guid><description>prepended trait Collection[A] { def prepended[B &amp;gt;: A](b: B): Collection[B] def +:[B &amp;gt;: A](b: B): Collection[B] } prepended creates a copy of this collection by adding the element b at the beginning.</description></item><item><title>prependedAll</title><link>https://superruzafa.github.io/visual-scala-reference/prependedAll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/prependedAll/</guid><description>prependedAll trait Collection[A] { def prependedAll[B &amp;gt;: A](bs: Collection[B]): Collection[B] def ++:[B &amp;gt;: A](bs: Collection[B]): Collection[B] } prependedAll creates a copy of this collection by adding the collection bs at the beginning.</description></item><item><title>product</title><link>https://superruzafa.github.io/visual-scala-reference/product/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/product/</guid><description>product trait Collection[A] { def product: A } product computes the product of the elements of this collection.
On empty collections this function returns the identity element for the A type&amp;rsquo;s product operation.</description></item><item><title>range</title><link>https://superruzafa.github.io/visual-scala-reference/range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/range/</guid><description>range object Collection { def range[A](start: A, end: A): Collection[A] def range[A](start: A, end: A, step: A): Collection[A] } range creates a collection using as elements the sequence of values that starts with start and stops before reaching end.
The increment used to calculate the next value in the sequence can be specified using step.</description></item><item><title>reduce</title><link>https://superruzafa.github.io/visual-scala-reference/reduce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/reduce/</guid><description>reduce trait Collection[A] { def reduce(op: (A, A) =&amp;gt; A): A } reduce applies the binary operator op to pairs of elements in this collection until the final result is calculated.
On empty collections this function throws an UnsupportedOperationException exception.</description></item><item><title>reduceLeft</title><link>https://superruzafa.github.io/visual-scala-reference/reduceLeft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/reduceLeft/</guid><description>reduceLeft trait Collection[A] { def reduceLeft[B :&amp;gt; A](op: (B, A) =&amp;gt; B): B } reduceLeft applies the binary operator op to each element, going from left to right, and the previous op result. The first time op is applied it&amp;rsquo;s fed with the two first elements.
On single-element collections that only element is returned and the binary operator op is not applied.
On empty collections this function throws an UnsupportedOperationException exception.</description></item><item><title>reduceLeftOption</title><link>https://superruzafa.github.io/visual-scala-reference/reduceLeftOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/reduceLeftOption/</guid><description>reduceLeftOption trait Collection[A] { def reduceLeftOption[B :&amp;gt; A](f: (B, A) =&amp;gt; B): Option[B] } reduceLeftOption applies the binary operator op to each element, going from left to right, and the previous op result. The first time op is applied it&amp;rsquo;s fed with the two first elements. The final result is wrapped with Some.
On empty collections this function returns None.</description></item><item><title>reduceOption</title><link>https://superruzafa.github.io/visual-scala-reference/reduceOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/reduceOption/</guid><description>reduceOption trait Collection[A] { def reduceOption(op: (A, A) =&amp;gt; A): Option[A] } reduceOption applies the binary operator op to pairs of elements in this collection until the final result is calculated and returned wrapped with Some.
On empty collections this function returns None.</description></item><item><title>reduceRight</title><link>https://superruzafa.github.io/visual-scala-reference/reduceRight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/reduceRight/</guid><description>reduceRight trait Collection[A] { def reduceRight[B :&amp;gt; A](op: (A, B) =&amp;gt; B): B } reduceRight applies the binary operator op to each element, going from right to left, and the previous op result. The first time op is applied it&amp;rsquo;s fed with the last two elements.
On single-element collections that only element is returned and the binary operator op is not applied.
On empty collections this function throws an UnsupportedOperationException exception.</description></item><item><title>reduceRightOption</title><link>https://superruzafa.github.io/visual-scala-reference/reduceRightOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/reduceRightOption/</guid><description>reduceRightOption trait Collection[A] { def reduceRightOption[B :&amp;gt; A](f: (A, B) =&amp;gt; B): Option[B] } reduceRightOption applies the binary operator op to each element, going from right to left, and the previous op result. The first time op is applied it&amp;rsquo;s fed with the last two elements. The final result is wrapped with Some.
On empty collections this function returns None.</description></item><item><title>removed</title><link>https://superruzafa.github.io/visual-scala-reference/removed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/removed/</guid><description>removed trait Map[K, V] { def removed(k: K): Map[K, V] } removed creates a new Map by copying all the elements from this one but omitting the element with key k.</description></item><item><title>reverse</title><link>https://superruzafa.github.io/visual-scala-reference/reverse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/reverse/</guid><description>reverse trait Collection[A] { def reverse: Collection[A] } reverse creates a collection by reversing the order of the elements.</description></item><item><title>reverseMap</title><link>https://superruzafa.github.io/visual-scala-reference/reverseMap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/reverseMap/</guid><description>reverseMap trait Collection[A] { def reverseMap[B](f: (A) =&amp;gt; B): Collection[B] } reverseMap creates a collection by reversing the order and applying a transformation function f to each element.</description></item><item><title>runWith</title><link>https://superruzafa.github.io/visual-scala-reference/runWith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/runWith/</guid><description>runWith trait PartialFunction[X, Y] { def runWith[U](g: (Y) =&amp;gt; U): (X) =&amp;gt; Boolean } runWith creates an anonymous function that applies this partial function and then g to an input value, if this partial function is defined for such value, and returns true.
For those values this partial function is not defined, the anonymous function just return false, without even applying g.</description></item><item><title>sameElements</title><link>https://superruzafa.github.io/visual-scala-reference/sameElements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/sameElements/</guid><description>sameElements trait Collection[A] { def sameElements(as: Collection[A]): Boolean } sameElements checks whether this collection has the same elements in the same order than the collection as and returns true if so.
This function returns false if at least one element doesn&amp;rsquo;t match its corresponding in as.</description></item><item><title>scanLeft</title><link>https://superruzafa.github.io/visual-scala-reference/scanLeft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/scanLeft/</guid><description>scanLeft trait Collection[A] { def scanLeft[B](z: B)(op: (B, A) =&amp;gt; B): Collection[B] } scanLeft creates a collection with the intermediate results of applying the binary operator op to this collection&amp;rsquo;s elements, going from left to right. The first time op is applied it&amp;rsquo;s fed with the initial value z.</description></item><item><title>scanRight</title><link>https://superruzafa.github.io/visual-scala-reference/scanRight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/scanRight/</guid><description>scanRight trait Collection[A] { def scanRight[B](z: B)(op: (A, B) =&amp;gt; B): Collection[B] } scanRight creates a collection with the intermediate results of applying the binary operator op to this collection&amp;rsquo;s elements, going from right to left. The first time op is applied it&amp;rsquo;s fed with the initial value z.</description></item><item><title>search</title><link>https://superruzafa.github.io/visual-scala-reference/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/search/</guid><description>search trait Collection[A] { def search[B &amp;gt;: A](e: B): SearchResult def search[B &amp;gt;: A](e: B, i: Int, j: Int): SearchResult } search searches the first element in this collection which equals (==) the element e and returns a Found containing the index where it was found.
If e cannot be found in the collection then an InsertionPoint containing the index where the element would be inserted is returned.</description></item><item><title>segmentLength</title><link>https://superruzafa.github.io/visual-scala-reference/segmentLength/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/segmentLength/</guid><description>segmentLength trait Collection[A] { def segmentLength(p: (A) =&amp;gt; Boolean, j: Int): Int } segmentLength returns the length of the largest segment of elements starting at j that satisfy the predicate p.</description></item><item><title>size</title><link>https://superruzafa.github.io/visual-scala-reference/size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/size/</guid><description>size trait Collection[A] { def size: Int } size returns how many elements this collection has.</description></item><item><title>slice</title><link>https://superruzafa.github.io/visual-scala-reference/slice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/slice/</guid><description>slice trait Collection[A] { def slice(i: Int, j: Int): Collection[A] } slice creates a collection with the sequence of elements that start at index i until the index j.</description></item><item><title>sliding</title><link>https://superruzafa.github.io/visual-scala-reference/sliding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/sliding/</guid><description>sliding trait Collection[A] { def sliding(m: Int, s: Int): Iterator[Collection[A]] } sliding computes all the slices of m elements starting every s elements and returns an Iterator to iterate them.</description></item><item><title>sortBy</title><link>https://superruzafa.github.io/visual-scala-reference/sortBy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/sortBy/</guid><description>sortBy trait Collection[A] { def sortBy[W](f: (A) =&amp;gt; W): Collection[A] } sortBy creates a collection with the elements sorted by the results yielded by f after being applied to each element.</description></item><item><title>sorted</title><link>https://superruzafa.github.io/visual-scala-reference/sorted/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/sorted/</guid><description>sorted trait Collection[A] { def sorted: Collection[A] } sorted creates a collection with the elements sorted.</description></item><item><title>sortWith</title><link>https://superruzafa.github.io/visual-scala-reference/sortWith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/sortWith/</guid><description>sortWith trait Collection[A] { def sortWith(lt: (A, A) =&amp;gt; Boolean): Collection[A] } sortWith creates a collection with the elements sorted by using a comparison function lt which should returns true when its first argument is less than the second and false otherwise.</description></item><item><title>span</title><link>https://superruzafa.github.io/visual-scala-reference/span/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/span/</guid><description>span trait Collection[A] { def span(p: (A) =&amp;gt; Boolean): (Collection[A], Collection[A]) } span creates a Tuple2 with two collections: one containing the longest prefix of elements that satisfy the predicate p and the other containing the rest of the elements.</description></item><item><title>splitAt</title><link>https://superruzafa.github.io/visual-scala-reference/splitAt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/splitAt/</guid><description>splitAt trait Collection[A] { def splitAt(i: Int): (Collection[A], Collection[A]) } splitAt creates a Tuple2 with two collections: the first containing all the elements whose index is less than i and the other with the rest of elements.</description></item><item><title>startsWith</title><link>https://superruzafa.github.io/visual-scala-reference/startsWith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/startsWith/</guid><description>startsWith trait Collection[A] { def startsWith(as: Collection[A]): Boolean def startsWith(as: Collection[A], j: Int): Boolean } startsWith checks whether the collection as is a prefix of this collection, returning true if so.
The search can start at the given offset j.
If as is not a prefix of this collection then false is returned.</description></item><item><title>sum</title><link>https://superruzafa.github.io/visual-scala-reference/sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/sum/</guid><description>sum trait Collection[A] { def sum: A } sum computes the sum of the elements of this collection.
On empty collections this function returns the identity element for the sum operation of the type A.</description></item><item><title>tabulate</title><link>https://superruzafa.github.io/visual-scala-reference/tabulate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/tabulate/</guid><description>tabulate object Collection { def tabulate[A](n1: Int, ..., nm: Int)(f: (Int, ..., Int): =&amp;gt; A) : Collection[ ... Collection[A] ... ] } tabulate creates an n-dimensional collection containing the result of the function f applied to a range of integers.</description></item><item><title>tail</title><link>https://superruzafa.github.io/visual-scala-reference/tail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/tail/</guid><description>tail trait Collection[A] { def tail: Collection[A] } tail returns all but the first element in this collection.
On empty collections this function throws a NoSuchElementException exception.</description></item><item><title>tails</title><link>https://superruzafa.github.io/visual-scala-reference/tails/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/tails/</guid><description>tails trait Collection[A] { def tails: Iterator[Collection[A]] } tails computes all possible suffixes of this collection and returns an Iterator to iterate them.</description></item><item><title>take</title><link>https://superruzafa.github.io/visual-scala-reference/take/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/take/</guid><description>take trait Collection[A] { def take(i: Int): Collection[A] } take creates a collection by keeping the first i elements of this collection and discarding the rest.</description></item><item><title>takeRight</title><link>https://superruzafa.github.io/visual-scala-reference/takeRight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/takeRight/</guid><description>takeRight trait Collection[A] { def takeRight(i: Int): Collection[A] } takeRight creates a collection by keeping the last i elements of this collection and discarding the rest.</description></item><item><title>takeWhile</title><link>https://superruzafa.github.io/visual-scala-reference/takeWhile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/takeWhile/</guid><description>takeWhile trait Collection[A] { def takeWhile(p: (A) =&amp;gt; Boolean): Collection[A] } takeWhile creates a collection by keeping the longest prefix of elements that satisfy a predicate p and discarding the rest.</description></item><item><title>transpose</title><link>https://superruzafa.github.io/visual-scala-reference/transpose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/transpose/</guid><description>transpose trait Collection[A] { def transpose[B]: Collection[Collection[B]] } transpose takes this collection of m x n elements and creates a new collection of n x m elements.
If not all the subcollections have the same size then this function throws an IllegalArgumentException exception.</description></item><item><title>tupled</title><link>https://superruzafa.github.io/visual-scala-reference/tupled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/tupled/</guid><description>tupled object Function { def tupled[X1, ..., Xn, Y](f: (X1, ..., Xn) =&amp;gt; Y): ((X1, ..., Xn)) =&amp;gt; Y } tupled creates an equivalent anonymous function that accepts a n-tuple as a single parameter and whose components correspond to the parameters of this function.</description></item><item><title>uncurried</title><link>https://superruzafa.github.io/visual-scala-reference/uncurried/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/uncurried/</guid><description>uncurried object Function { def uncurried[X1, ..., Xn, Y](f: (X1) =&amp;gt; ... =&amp;gt; (Xn) =&amp;gt; Y): (X1, ..., Xn) =&amp;gt; Y } uncurried creates an equivalent anonymous function that accepts at once all the successive parameters accepted by the sequence of high order functions started with the function f.</description></item><item><title>unfold</title><link>https://superruzafa.github.io/visual-scala-reference/unfold/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/unfold/</guid><description>unfold object Collection { def unfold[A, S](s: S)(f: (S) =&amp;gt; Option[(A, S)]): Collection[A] } unfold creates a collection by taking each pair of values returned by the function f both to get the current element and calculate the next, as long as the function returns them wrapped with Some.
It stops building the collection as soon as f returns None.
The first time the function f is applied it&amp;rsquo;s fed with the initial value s.</description></item><item><title>union</title><link>https://superruzafa.github.io/visual-scala-reference/union/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/union/</guid><description>union trait Collection[A] { def union(as: Collection[A]): Collection[A] } union computes the multiset union between this and the as collection.</description></item><item><title>unlift</title><link>https://superruzafa.github.io/visual-scala-reference/unlift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/unlift/</guid><description>unlift object Function { def unlift[X, Y](f: (X) =&amp;gt; Option[Y]): PartialFunction[X, Y] } unlift creates an anonymous partial function that returns the value extracted from Some returned by the function f.
If f returns None then the anonymous partial function will throw a MatchError exception.</description></item><item><title>untupled</title><link>https://superruzafa.github.io/visual-scala-reference/untupled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/untupled/</guid><description>untupled object Function { def untupled[X1, ..., Xn, Y](f: ((X1, ..., Xn)) =&amp;gt; Y): (X1, ..., Xn) =&amp;gt; Y } untupled creates an equivalent anonymous function that accepts n parameters corresponding to each component of the n-tuple accepted by the function f as a single parameter.</description></item><item><title>unzip</title><link>https://superruzafa.github.io/visual-scala-reference/unzip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/unzip/</guid><description>unzip trait Collection[AB] { def unzip[A, B]: (Collection[A], Collection[B]) } unzip creates a Tuple2 with two collections: the first containing the first component of each pair element and the second containing the rest.</description></item><item><title>unzip3</title><link>https://superruzafa.github.io/visual-scala-reference/unzip3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/unzip3/</guid><description>unzip3 trait Collection[ABC] { def unzip3[A, B, C]: (Collection[A], Collection[B], Collection[C]) } unzip3 creates a Tuple3 with three collections: the first containing the first component of each tripled element, the second containing the second component and the third containing the rest.</description></item><item><title>updated</title><link>https://superruzafa.github.io/visual-scala-reference/updated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/updated/</guid><description>updated trait Collection[A] { def updated(i: Int, a: A): Collection[A] } updated creates a collection by copying all the elements of this collection but changing the i-esim element by the value a.</description></item><item><title>values</title><link>https://superruzafa.github.io/visual-scala-reference/values/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/values/</guid><description>values trait Map[K, V] { def values: Iterable[V] } values creates an Iterator to iterate this Map's values.</description></item><item><title>withDefault</title><link>https://superruzafa.github.io/visual-scala-reference/withDefault/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/withDefault/</guid><description>withDefault trait Map[K, V] { def withDefault(f: (K) =&amp;gt; V): Map[K, V] } withDefault creates a Map with the same key-value pairs from this Map but providing a key-based computed value for those missing keys.</description></item><item><title>withDefaultValue</title><link>https://superruzafa.github.io/visual-scala-reference/withDefaultValue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/withDefaultValue/</guid><description>withDefaultValue trait Map[K, V] { def withDefaultValue(v: V): Map[K, V] } withDefaultValue creates a Map with the same key-value pairs from this Map but providing a fixed value for those missing keys.</description></item><item><title>zip</title><link>https://superruzafa.github.io/visual-scala-reference/zip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/zip/</guid><description>zip trait Collection[A] { def zip[B](bs: Collection[B]): Collection[(A, B)] } zip creates a collection by pairing each element of this collection with the element occupying the same index in bs and discarding unpaired elements.</description></item><item><title>zipAll</title><link>https://superruzafa.github.io/visual-scala-reference/zipAll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/zipAll/</guid><description>zipAll trait Collection[A] { def zipAll[B](bs: Collection[B], a: A, b: B): Collection[(A, B)] } zipAll creates a collection by pairing each element of this collection with the element occupying the same index in bs and providing default values a or b for unpaired elements.</description></item><item><title>zipWithIndex</title><link>https://superruzafa.github.io/visual-scala-reference/zipWithIndex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/zipWithIndex/</guid><description>zipWithIndex trait Collection[A] { def zipWithIndex: Collection[(A, Int)] } zipWithIndex creates a collection by pairing each element with its own index.</description></item></channel></rss>