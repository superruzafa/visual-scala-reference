<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functions on Visual Scala Reference</title><link>https://superruzafa.github.io/visual-scala-reference/pt/functions/</link><description>Recent content in Functions on Visual Scala Reference</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://superruzafa.github.io/visual-scala-reference/pt/functions/index.xml" rel="self" type="application/rss+xml"/><item><title>aggregate</title><link>https://superruzafa.github.io/visual-scala-reference/pt/aggregate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/aggregate/</guid><description>aggregate trait Collection[A] { def aggregate[B](z: =&amp;gt; B)(seqop: (B, A) =&amp;gt; B, combop: (B, B) =&amp;gt; B): B } aggregate aplica o operador binário seqop a partes de elementos e depois combine os resultados intermediários com o operador binário combop. O valor z é o elemento neutro para o tipo B e pode ser usado várias vezes.</description></item><item><title>andThen</title><link>https://superruzafa.github.io/visual-scala-reference/pt/andThen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/andThen/</guid><description>andThen trait Function1[X, Y] { def andThen[Z](g: (Y) =&amp;gt; Z): (X) =&amp;gt; Z } andThen cria uma função anônima que aceita um valor e retorna o resultado da aplicação dessa função a esse valor primeiro e depois g.</description></item><item><title>appended</title><link>https://superruzafa.github.io/visual-scala-reference/pt/appended/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/appended/</guid><description>appended trait Collection[A] { def appended[B &amp;gt;: A](b: B): Collection[B] def :+[B &amp;gt;: A](b: B): Collection[B] } appended cria uma cópia dessa coleção adicionando o elemento b no final.</description></item><item><title>appendedAll</title><link>https://superruzafa.github.io/visual-scala-reference/pt/appendedAll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/appendedAll/</guid><description>appendedAll trait Collection[A] { def appendedAll[B &amp;gt;: A](bs: Collection[B]): Collection[B] def :++[B &amp;gt;: A](bs: Collection[B]): Collection[B] } appendedAll cria uma cópia desta coleção adicionando a coleção bs ao final.</description></item><item><title>chain</title><link>https://superruzafa.github.io/visual-scala-reference/pt/chain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/chain/</guid><description>chain object Function { def chain[X](fs: Collection[(X) =&amp;gt; X]): (X) =&amp;gt; X } chain cria uma função anônima que aceita um valor e retorna o resultado da aplicação seqüencial de todas as funções contidas na coleção fs.</description></item><item><title>collect</title><link>https://superruzafa.github.io/visual-scala-reference/pt/collect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/collect/</guid><description>collect trait Collection[A] { def collect[B](f: PartialFunction[A, B]): Collection[B] } collect constroi uma coleção usando os resultados da aplicação da função parcial f àqueles elementos para os quais f é definido, descartando o restante dos elementos.</description></item><item><title>collectFirst</title><link>https://superruzafa.github.io/visual-scala-reference/pt/collectFirst/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/collectFirst/</guid><description>collectFirst trait Collection[A] { def collectFirst[B](f: PartialFunction[A, B]): Option[B] } collectFirst aplica a função parcial f ao primeiro elemento desta coleção para o qual f é definido e retorna seu resultado empacotado com Some.
Se a função parcial f não estiver definida para nenhum elemento desta coleção, será retornado None.</description></item><item><title>combinations</title><link>https://superruzafa.github.io/visual-scala-reference/pt/combinations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/combinations/</guid><description>combinations trait Collection[A] { def combinations(k: Int): Iterator[Collection[A]] } combinations calcula todas as combinações possíveis de elementos nesta coleção, tiradas de k em k e retorna um Iterator para iterar.</description></item><item><title>compose</title><link>https://superruzafa.github.io/visual-scala-reference/pt/compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/compose/</guid><description>compose trait Function1[X, Y] { def compose[Z](g: (Z) =&amp;gt; X): (Z) =&amp;gt; Y } compose cria uma função anônima que aceita um valor e retorna o resultado da aplicação da função g primeiro e depois dessa função nesse valor.</description></item><item><title>concat</title><link>https://superruzafa.github.io/visual-scala-reference/pt/concat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/concat/</guid><description>concat object Collection { def concat[A](as: Collection[A]*): Collection[A] } concat aceita um número indeterminado de coleções e usa seus elementos para criar uma única coleção.</description></item><item><title>cond</title><link>https://superruzafa.github.io/visual-scala-reference/pt/cond/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/cond/</guid><description>cond object PartialFunction { def cond[X](x: X)(pf: PartialFunction[X, Boolean]): Boolean } cond aceita o valor x e cria uma função parcial anônima que por sua vez aceita a função parcial pf, aplica-a em x e retorna o mesmo valor retornado por pf.
Se pf não estiver definido para o valor de entrada x, a função anônimo retorna false.</description></item><item><title>condOpt</title><link>https://superruzafa.github.io/visual-scala-reference/pt/condOpt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/condOpt/</guid><description>condOpt object PartialFunction { def condOpt[X, Y](x: X)(pf: PartialFunction[X, Y]): Option[Y] } condOpt aceita o valor x e cria uma função parcial anônima que por sua vez aceita a função parcial pf, aplica-a em x e retorna o valor de retorno por pf envolvendo-o com Some.
Se pf não estiver definido para o valor de entrada x, a função anônimo retorna None.</description></item><item><title>const</title><link>https://superruzafa.github.io/visual-scala-reference/pt/const/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/const/</guid><description>const object Function { def const[X, Y](x: X)(y: Y): X } const aceita o valor x e cria uma função anônima que retorna esse valor x contra qualquer valor de entrada y.</description></item><item><title>contains</title><link>https://superruzafa.github.io/visual-scala-reference/pt/contains/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/contains/</guid><description>contains trait Collection[A] { def contains(a: A): Boolean } contains verifica se um determinado valor a é igual (==) a pelo menos qualquer elemento desta coleção, retornando true nesse caso.
Se nenhum elemento for igual a esse valor, essa função retornará false.</description></item><item><title>containsSlice</title><link>https://superruzafa.github.io/visual-scala-reference/pt/containsSlice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/containsSlice/</guid><description>containsSlice trait Collection[A] { def containsSlice(as: Collection[A]): Boolean } containsSlice verifica se a coleção as é encontrada como uma sub-coleção dessa coleção, retornando true nesse caso.
Se a coleção as não puder ser encontrada como uma sub-coleção desta coleção, essa função retornará false.</description></item><item><title>copyToArray</title><link>https://superruzafa.github.io/visual-scala-reference/pt/copyToArray/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/copyToArray/</guid><description>copyToArray trait Collection[A] { def copyToArray[B :&amp;gt; A](array: Array[B]): Int def copyToArray[B :&amp;gt; A](array: Array[B], i: Int): Int def copyToArray[B :&amp;gt; A](array: Array[B], i: Int, l: Int): Int } copyToArray copia elementos desta coleção para um Array e retorna quantos itens foram copiados.
A cópia pode ser colocada com um deslocamento de i da matriz de destino.
Além disso, a cópia pode ser restrita ao máximo dos primeiros elementos l.</description></item><item><title>corresponds</title><link>https://superruzafa.github.io/visual-scala-reference/pt/corresponds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/corresponds/</guid><description>corresponds trait Collection[A] { def corresponds[B](bs: Collection[B])(p: (A, B) =&amp;gt; Boolean): Boolean } corresponds verifica se o predicado p é satisfeito para cada par de elementos que eles ocupam a mesma posição nesta e na coleção bs, retornando true nesse caso.
Se pelo menos um par de elementos não satisfizer p ou houver elementos não emparelhados, A função retorna false.</description></item><item><title>count</title><link>https://superruzafa.github.io/visual-scala-reference/pt/count/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/count/</guid><description>count trait Collection[A] { def count(p: (A) =&amp;gt; Boolean): Int } count determina quantos elementos nesta coleção atendem ao predicado p.</description></item><item><title>curried</title><link>https://superruzafa.github.io/visual-scala-reference/pt/curried/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/curried/</guid><description>curried trait Function[X1, X2..., Xn, Y] { def curried: (X1) =&amp;gt; (X2) =&amp;gt; ... =&amp;gt; (Xn) =&amp;gt; Y } curried cria uma função anônima equivalente para processar o primeiro parâmetro dessa função. Por sua vez, essa função anônima retorna outra função anônima para processar o segundo parâmetro dessa função &amp;hellip; até que todos os parâmetros tenham sido processados ​​e o resultado final calculado.</description></item><item><title>diff</title><link>https://superruzafa.github.io/visual-scala-reference/pt/diff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/diff/</guid><description>diff trait Collection[A] { def diff(as: Collection[A]): Collection[A] } diff calcula a diferença de vários conjuntos entre essa coleção e a coleção as.</description></item><item><title>distinct</title><link>https://superruzafa.github.io/visual-scala-reference/pt/distinct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/distinct/</guid><description>distinct trait Collection[A] { def distinct: Collection[A] } distinct cria uma cópia desta coleção sem itens duplicados.</description></item><item><title>distinctBy</title><link>https://superruzafa.github.io/visual-scala-reference/pt/distinctBy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/distinctBy/</guid><description>distinctBy trait Seq[A] { def distinctBy[K](f: (A) =&amp;gt; K): Seq[A] } distinct cria uma cópia desta coleção mantendo um dos elementos que emita a mesma chave após a função f ser aplicada a eles.</description></item><item><title>drop</title><link>https://superruzafa.github.io/visual-scala-reference/pt/drop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/drop/</guid><description>drop trait Collection[A] { def drop(i: Int): Collection[A] } drop cria uma coleção descartando os primeiros elementos i desta coleção, mantendo o restante.</description></item><item><title>dropRight</title><link>https://superruzafa.github.io/visual-scala-reference/pt/dropRight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/dropRight/</guid><description>dropRight trait Collection[A] { def dropRight(i: Int): Collection[A] } dropRight cria uma coleção descartando os últimos elementos i dessa coleção, mantendo o restante.</description></item><item><title>dropWhile</title><link>https://superruzafa.github.io/visual-scala-reference/pt/dropWhile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/dropWhile/</guid><description>dropWhile trait Collection[A] { def dropWhile(p: (A) =&amp;gt; Boolean): Collection[A] } dropWhile cria uma coleção descartando o prefixo mais longo de elementos que satisfazem o predicado p, mantendo o restante.</description></item><item><title>empty (collections)</title><link>https://superruzafa.github.io/visual-scala-reference/pt/empty_collections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/empty_collections/</guid><description>empty Para função empty de PartialFunction veja aqui.
object Collection { def empty[A]: Collection[A] } empty cria uma coleção para conter elementos do tipo A, mas sem nenhum elemento.</description></item><item><title>empty (PartialFunction)</title><link>https://superruzafa.github.io/visual-scala-reference/pt/empty_PartialFunction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/empty_PartialFunction/</guid><description>empty Para função empty para coleções, veja aqui.
object PartialFunction { def empty[A, B]: PartialFunction[A, B] } empty cria uma função parcial anônima que não está definida para nenhum valor.</description></item><item><title>endsWith</title><link>https://superruzafa.github.io/visual-scala-reference/pt/endsWith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/endsWith/</guid><description>endsWith trait Collection[A] { def endsWith(as: Collection[A]): Boolean } endsWith verifica se a coleção as é um sufixo dessa coleção, retornando true nesse caso.
Se as não for um sufixo desta coleção, essa função retornará false.</description></item><item><title>exists</title><link>https://superruzafa.github.io/visual-scala-reference/pt/exists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/exists/</guid><description>exists trait Collection[A] { def exists(p: (A) =&amp;gt; Boolean): Boolean } exists verifica se pelo menos um elemento nesta coleção satisfaz o predicado p, retornando true se esse elemento existir.
Em coleções vazias, o predicado p não pode ser satisfeito pelo menos uma vez, portanto, essa função retorna false.</description></item><item><title>fill</title><link>https://superruzafa.github.io/visual-scala-reference/pt/fill/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/fill/</guid><description>fill object Collection { def fill[A](n1: Int, ..., nm: Int)(a: =&amp;gt; A): Collection[ ... Collection[A] ... ] } fill cria uma coleção n-dimensional contendo o resultado de determinada computação a.</description></item><item><title>filter</title><link>https://superruzafa.github.io/visual-scala-reference/pt/filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/filter/</guid><description>filter trait Collection[A] { def filter(p: (A) =&amp;gt; Boolean): Collection[A] } filter cria uma coleção com os elementos que satisfazem o predicado p, descartando o restante.</description></item><item><title>filterKeys</title><link>https://superruzafa.github.io/visual-scala-reference/pt/filterKeys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/filterKeys/</guid><description>filterKeys trait Map[K, V] { def filterKeys(p: (K) =&amp;gt; Boolean): Map[K, V] } filterKeys cria um Map com esses pares de valores-chave cuja chave satisfaz o predicado p, descartando o restante.</description></item><item><title>filterNot</title><link>https://superruzafa.github.io/visual-scala-reference/pt/filterNot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/filterNot/</guid><description>filterNot trait Collection[A] { def filterNot(p: (A) =&amp;gt; Boolean): Collection[A] } filterNot cria uma coleção com os elementos que não satisfazem o predicado p, descartando o restante.</description></item><item><title>find</title><link>https://superruzafa.github.io/visual-scala-reference/pt/find/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/find/</guid><description>find trait Collection[A] { def find(p: (A) =&amp;gt; Boolean): Option[A] } find retorna o primeiro elemento que satisfaz o predicado p, envolvido com Some.
Se nenhum elemento nesta coleção satisfizer p, essa função retornará None.</description></item><item><title>findLast</title><link>https://superruzafa.github.io/visual-scala-reference/pt/findLast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/findLast/</guid><description>findLast trait Collection[A] { def findLast(p: (A) =&amp;gt; Boolean): Option[A] } findLast retorna o último elemento que satisfaz o predicado p, envolvido com Some.
Se nenhum elemento nesta coleção satisfizer p, essa função retornará None.</description></item><item><title>flatMap</title><link>https://superruzafa.github.io/visual-scala-reference/pt/flatMap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/flatMap/</guid><description>flatMap trait Collection[A] { def flatMap(f: (A) =&amp;gt; Collection[B]): Collection[B] } flatMap cria uma coleção aplicando a função f a cada elemento e usando os subelementos resultantes como elementos da nova coleção.</description></item><item><title>flatten</title><link>https://superruzafa.github.io/visual-scala-reference/pt/flatten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/flatten/</guid><description>flatten trait Collection[A] { def flatten[B]: Collection[B] } flatten cria uma coleção usando os elementos das subcoleções desta coleção.</description></item><item><title>fold</title><link>https://superruzafa.github.io/visual-scala-reference/pt/fold/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/fold/</guid><description>fold trait Collection[A] { def fold(z: A)(op: (A, A) =&amp;gt; A): A } fold aplica o operador binário op aos pares de elementos nesta coleção até que o resultado final seja calculado. O elemento neutro z pode ser usado várias vezes.</description></item><item><title>foldLeft</title><link>https://superruzafa.github.io/visual-scala-reference/pt/foldLeft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/foldLeft/</guid><description>foldLeft trait Collection[A] { def foldLeft[B](z: B)(op: (B, A) =&amp;gt; B): B } foldLeft aplica, da esquerda para a direita, o operador binário op para cada elemento e o resultado da anterior op. A primeira vez que op é aplicada, ela é alimentada com o valor inicial z.
Em coleções vazias, essa função nem aplica op e o valor inicial z é retornado diretamente.</description></item><item><title>foldRight</title><link>https://superruzafa.github.io/visual-scala-reference/pt/foldRight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/foldRight/</guid><description>foldRight trait Collection[A] { def foldRight[B](z: B)(op: (A, B) =&amp;gt; B): B } foldRight aplica, da direita para a esquerda, o operador binário op a cada elemento e o resultado da anterior op. A primeira vez que op é aplicada, ela é alimentada com o valor inicial z.
Em coleções vazias, essa função nem aplica op e o valor inicial z é retornado diretamente.</description></item><item><title>forall</title><link>https://superruzafa.github.io/visual-scala-reference/pt/forall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/forall/</guid><description>forall trait Collection[A] { def forall(p: (A) =&amp;gt; Boolean): Boolean } forall verifica se todos os elementos nesta coleção atendem ao predicado p, retornando false se p não for atendido por pelo menos um elemento.
Em coleções vazias, não há elemento que não satisfaça p, portanto, essa função retorna true.</description></item><item><title>foreach</title><link>https://superruzafa.github.io/visual-scala-reference/pt/foreach/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/foreach/</guid><description>foreach trait Collection[A] { def foreach(f: (A) =&amp;gt; Unit): Unit } foreach aplica a função f a cada elemento desta coleção, descartando quaisquer resultados. Esta função retorna ().</description></item><item><title>fromFunction</title><link>https://superruzafa.github.io/visual-scala-reference/pt/fromFunction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/fromFunction/</guid><description>fromFunction object PartialFunction { def fromFunction[X, Y](f: (X) =&amp;gt; Y): PartialFunction[X, Y] } fromFunction cria uma função parcial anônima a partir de uma função total.</description></item><item><title>getOrElse (Map)</title><link>https://superruzafa.github.io/visual-scala-reference/pt/getOrElse_Map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/getOrElse_Map/</guid><description>getOrElse Para função getOrElse de Option ir aquí.
trait Map[K, V] { def getOrElse(k: K, v: =&amp;gt; V): V } getOrElse retorna o valor associado à chave k neste Map.
Se este Map não contiver a chave k, esta função retornará o resultado da computação v.</description></item><item><title>getOrElse (Option)</title><link>https://superruzafa.github.io/visual-scala-reference/pt/getOrElse_Option/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/getOrElse_Option/</guid><description>getOrElse Para função getOrElse de Map ir aquí.
trait Option[A] { def getOrElse[B &amp;gt;: A](b: =&amp;gt; B): B } getOrElse retorna o valor agrupado quando esta Opção é Some.
Quando esta Opção é None, esta função retorna o valor padrão b.</description></item><item><title>groupBy</title><link>https://superruzafa.github.io/visual-scala-reference/pt/groupBy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/groupBy/</guid><description>groupBy trait Collection[A] { def groupBy[K](f: (A) =&amp;gt; K): Map[K, Collection[A]] } groupBy cria um Map agrupando os elementos sob a tecla que eles emitem quando a função f é aplicada a eles.</description></item><item><title>grouped</title><link>https://superruzafa.github.io/visual-scala-reference/pt/grouped/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/grouped/</guid><description>grouped trait Collection[A] { def grouped(m: Int): Iterator[Collection[A]] } grouped divide esta coleção em subcoleções menores de no máximo elementos m e retorna um Iterator para iterá-los.</description></item><item><title>groupMap</title><link>https://superruzafa.github.io/visual-scala-reference/pt/groupMap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/groupMap/</guid><description>groupMap trait Collection[A] { def groupMap[K, B](f: (A) =&amp;gt; K)(g: (A) =&amp;gt; B): Map[K, Collection[B]] } groupMap crie um Map agrupando os elementos sob a chave que eles emitem quando a função f é aplicada a eles e então eles são transformados por meio da função g.</description></item><item><title>groupMapReduce</title><link>https://superruzafa.github.io/visual-scala-reference/pt/groupMapReduce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/groupMapReduce/</guid><description>groupMapReduce trait Collection[A] { def groupMapReduce[K, B](k: (A) =&amp;gt; K)(f: (A) =&amp;gt; B)(op: (B, B) =&amp;gt; B): Map[K, B] } groupMapReduce cria um Map agrupando os elementos sob a chave emitida pela função k quando aplicada a eles, aplicando a função de transformação f aos elementos agrupados e, finalmente, reduzindo os elementos transformados usando o operador binário associativo op .</description></item><item><title>head</title><link>https://superruzafa.github.io/visual-scala-reference/pt/head/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/head/</guid><description>head trait Collection[A] { def head: A } head retorna o primeiro item nesta coleção.
Em coleções vazias, essa coleção lança uma exceção NoSuchElementException.</description></item><item><title>headOption</title><link>https://superruzafa.github.io/visual-scala-reference/pt/headOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/headOption/</guid><description>headOption trait Collection[A] { def headOption: Option[A] } headOption retorna o primeiro item desta coleção, envolvido com Some.
Em coleções vazias em que não há primeiro elemento, essa função retorna None.</description></item><item><title>indexOf</title><link>https://superruzafa.github.io/visual-scala-reference/pt/indexOf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/indexOf/</guid><description>indexOf trait Collection[A] { def indexOf(a: A): Int def indexOf(a: A, j: Int): Int } indexOf retorna o índice do primeiro elemento que é igual (==) ao valor a.
A pesquisa pode começar com um deslocamento de índice j.
Se nenhum elemento for igual a a, então esta função retornará -1.</description></item><item><title>indexOfSlice</title><link>https://superruzafa.github.io/visual-scala-reference/pt/indexOfSlice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/indexOfSlice/</guid><description>indexOfSlice trait Collection[A] { def indexOfSlice(as: Collection[A]): Int def indexOfSlice(as: Collection[A], j: Int): Int } indexOfSlice retorna o índice do primeiro elemento em que a coleção as pode ser encontrada como uma sub-coleção.
A pesquisa pode começar com um deslocamento de índice j.
Se as não puder ser encontrado como uma sub-coleção desta coleção, essa função retornará -1.</description></item><item><title>indexWhere</title><link>https://superruzafa.github.io/visual-scala-reference/pt/indexWhere/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/indexWhere/</guid><description>indexWhere trait Collection[A] { def indexWhere(p: (A) =&amp;gt; Boolean): Int def indexWhere(p: (A) =&amp;gt; Boolean: j: Int): Int } indexWhere retorna o índice do primeiro elemento que satisfaz o predicado p.
A pesquisa pode começar com um deslocamento de índice j.
Se nenhum elemento satisfizer p, esta função retornará -1.</description></item><item><title>indices</title><link>https://superruzafa.github.io/visual-scala-reference/pt/indices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/indices/</guid><description>indices trait Collection[A] { def indices: Range } indices criar um Range com os índices usados ​​por esta coleção.</description></item><item><title>init</title><link>https://superruzafa.github.io/visual-scala-reference/pt/init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/init/</guid><description>init trait Collection[A] { def init: Collection[A] } init retorna todos os elementos desta coleção, exceto o último.
Em coleções vazias, essa coleção lança uma exceção UnsupportedOperationException.</description></item><item><title>inits</title><link>https://superruzafa.github.io/visual-scala-reference/pt/inits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/inits/</guid><description>inits trait Collection[A] { def inits: Iterator[Collection[A]] } inits calcula todos os prefixos possíveis nesta coleção e retorna um Iterator para iterar.</description></item><item><title>intersect</title><link>https://superruzafa.github.io/visual-scala-reference/pt/intersect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/intersect/</guid><description>intersect trait Collection[A] { def intersect(as: Collection[A]): Collection[A] } intersect calcula a interseção multiset entre esta coleção e a coleção as.</description></item><item><title>isDefinedAt (Map)</title><link>https://superruzafa.github.io/visual-scala-reference/pt/isDefinedAt_Map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/isDefinedAt_Map/</guid><description>isDefinedAt Para função isDefinedAt de Seq ver aqui.
trait Map[K, V] { def isDefinedAt(k: K): Boolean } isDefinedAt Verifique se este Map contém algum elemento cuja chave é k, retornando true nesse caso.
Quando não há elemento definido com a chave k, esta função retorna false.</description></item><item><title>isDefinedAt (Seq)</title><link>https://superruzafa.github.io/visual-scala-reference/pt/isDefinedAt_Seq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/isDefinedAt_Seq/</guid><description>isDefinedAt Para função isDefinedAt de Map ver aqui.
trait Seq[A] { def isDefinedAt(i: Int): Boolean } isDefinedAt verifica se uma Seq contém algum elemento em um dado índice i, retornando true nesse caso.
Quando não há elemento definido no índice i, esta função retorna false.</description></item><item><title>isEmpty</title><link>https://superruzafa.github.io/visual-scala-reference/pt/isEmpty/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/isEmpty/</guid><description>isEmpty trait Collection[A] { def isEmpty: Boolean } isEmpty verifica se esta coleção não possui elementos e retorna false caso contrário.
Esta função retorna apenas true para coleções vazias.</description></item><item><title>isTraversableAgain</title><link>https://superruzafa.github.io/visual-scala-reference/pt/isTraversableAgain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/isTraversableAgain/</guid><description>isTraversableAgain trait Collection[A] { def isTraversableAgain: Boolean } isTraversableAgain verifica se esta coleção pode ser percorrida repetidamente a partir do start e retorna true nesse caso.
Se a coleção não puder ser percorrida várias vezes, essa função retornará false.</description></item><item><title>keys</title><link>https://superruzafa.github.io/visual-scala-reference/pt/keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/keys/</guid><description>keys trait Map[K, V] { def keys: Iterable[V] } keys criar um Iterator para iterar as chaves do Map.</description></item><item><title>last</title><link>https://superruzafa.github.io/visual-scala-reference/pt/last/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/last/</guid><description>last trait Collection[A] { def last: A } last retorna o último item nesta coleção.
Em coleções vazias, essa função lança uma exceção NoSuchElementException.</description></item><item><title>lastIndexOf</title><link>https://superruzafa.github.io/visual-scala-reference/pt/lastIndexOf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/lastIndexOf/</guid><description>lastIndexOf trait Collection[A] { def lastIndexOf(a: A): Int def lastIndexOf(a: A, j: Int): Int } lastIndexOf retorna o índice do último elemento que é igual (==) ao valor a.
A pesquisa pode começar com um deslocamento de índice j.
Se nenhum elemento for igual a, então esta função retornará -1.</description></item><item><title>lastIndexOfSlice</title><link>https://superruzafa.github.io/visual-scala-reference/pt/lastIndexOfSlice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/lastIndexOfSlice/</guid><description>lastIndexOfSlice trait Collection[A] { def lastIndexOfSlice(as: Collection[A]): Int def lastIndexOfSlice(as: Collection[A], j: Int): Int } lastIndexOfSlice retorna o índice do último elemento em que a coleção as pode ser encontrada como uma sub-coleção.
A pesquisa pode começar com um deslocamento de índice j.
Se as não puder ser encontrado como uma sub-coleção desta coleção, essa função retornará -1.</description></item><item><title>lastIndexWhere</title><link>https://superruzafa.github.io/visual-scala-reference/pt/lastIndexWhere/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/lastIndexWhere/</guid><description>lastIndexWhere trait Collection[A] { def lastIndexWhere(p: (A) =&amp;gt; Boolean): Int def lastIndexWhere(p: (A) =&amp;gt; Boolean: j: Int): Int } lastIndexWhere retorna o índice do último elemento que satisfaz o predicado p.
A pesquisa pode começar com um deslocamento de índice j.
Se nenhum elemento satisfizer p, esta função retornará -1.</description></item><item><title>lastOption</title><link>https://superruzafa.github.io/visual-scala-reference/pt/lastOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/lastOption/</guid><description>lastOption trait Collection[A] { def lastOption: Option[A] } lastOption retorna o último item desta coleção, envolvido com Some.
Em coleções vazias em que não há último elemento, retorna None.</description></item><item><title>length</title><link>https://superruzafa.github.io/visual-scala-reference/pt/length/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/length/</guid><description>length trait Collection[A] { def length: Int } length retorna quantos itens esta coleção possui.</description></item><item><title>lift</title><link>https://superruzafa.github.io/visual-scala-reference/pt/lift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/lift/</guid><description>lift trait PartialFunction[X, Y] { def lift: (X) =&amp;gt; Option[Y] } lift cria uma função anônima que agrupa com Some o valor retornado por essa função parcial, se definido para o valor de entrada especificado.
Cria uma função anônima que agrupa com Some o valor retornado por essa função parcial se ela estiver definida para o valor de entrada especificado.
Para os valores de entrada para os quais essa função parcial não está definida, a função anônima retornará None.</description></item><item><title>map</title><link>https://superruzafa.github.io/visual-scala-reference/pt/map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/map/</guid><description>map trait Collection[A] { def map[B](f: (A) =&amp;gt; B): Collection[B] } map cria uma coleção usando os resultados da aplicação da função f a cada elemento desta coleção.</description></item><item><title>mapConserve</title><link>https://superruzafa.github.io/visual-scala-reference/pt/mapConserve/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/mapConserve/</guid><description>mapConserve trait List[A] { def mapConserve[B &amp;gt;: A](f: (A) =&amp;gt; B): List[B] } mapConserve aplica a função f a cada elemento da List e o retorna intacto se cada elemento transformado for igual (em termos de eq) para o elemento a partir do qual foram obtidos.
Se pelo menos um elemento transformado não for igual (em termos de eq) a elemento original, esta função cria uma nova List composta.</description></item><item><title>mapValues</title><link>https://superruzafa.github.io/visual-scala-reference/pt/mapValues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/mapValues/</guid><description>mapValues trait Map[K, V] { def mapValues[W](f: (V) =&amp;gt; W): Map[K, W] } mapValues cria um Map com as mesmas chaves que este Map, mas transformando o valor de cada chave com a função f.</description></item><item><title>max</title><link>https://superruzafa.github.io/visual-scala-reference/pt/max/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/max/</guid><description>max trait Collection[A] { def max: A } max retorna o maior valor nesta coleção.
Em coleções vazias, essa função lança uma exceção UnsupportedOperationException.</description></item><item><title>maxBy</title><link>https://superruzafa.github.io/visual-scala-reference/pt/maxBy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/maxBy/</guid><description>maxBy trait Collection[A] { def maxBy[W](f: (A) =&amp;gt; W): A } maxBy aplica f para cada elemento e retorna o elemento que emitiu o maior valor.
Em coleções vazias, essa função lança uma exceção UnsupportedOperationException.</description></item><item><title>maxByOption</title><link>https://superruzafa.github.io/visual-scala-reference/pt/maxByOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/maxByOption/</guid><description>maxByOption trait Collection[A] { def maxByOption[W](f: (A) =&amp;gt; W): A } maxByOption aplica f para cada elemento e retorna o elemento que emitiu o maior valor envolvido com Some.
Em coleções vazias, essa função retorna None.</description></item><item><title>maxOption</title><link>https://superruzafa.github.io/visual-scala-reference/pt/maxOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/maxOption/</guid><description>maxOption trait Collection[A] { def maxOption: Option[A] } maxOption retorna o maior valor nesta coleção, envolvido com Some.
Em coleções vazias, essa função retorna None.</description></item><item><title>min</title><link>https://superruzafa.github.io/visual-scala-reference/pt/min/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/min/</guid><description>min trait Collection[A] { def min: A } min retorna o menor valor nesta coleção.
Em coleções vazias, essa função lança uma exceção UnsupportedOperationException.</description></item><item><title>minBy</title><link>https://superruzafa.github.io/visual-scala-reference/pt/minBy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/minBy/</guid><description>minBy trait Collection[A] { def minBy[W](f: (A) =&amp;gt; W): A } minBy aplica f para cada elemento e retorna o elemento que emitiu o menor valor.
Em coleções vazias, essa função lança uma exceção UnsupportedOperationException.</description></item><item><title>minByOption</title><link>https://superruzafa.github.io/visual-scala-reference/pt/minByOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/minByOption/</guid><description>minByOption trait Collection[A] { def minByOption[W](f: (A) =&amp;gt; W): A } minByOption aplica f para cada elemento e retorna o elemento que emitiu o menor valor envolvido com Some.
Em coleções vazias, essa função retorna None.</description></item><item><title>minOption</title><link>https://superruzafa.github.io/visual-scala-reference/pt/minOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/minOption/</guid><description>minOption trait Collection[A] { def minOption: Option[A] } minOption retorna o menor valor nesta coleção, envolvido com Some.
Em coleções vazias, essa função retorna None.</description></item><item><title>mkString</title><link>https://superruzafa.github.io/visual-scala-reference/pt/mkString/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/mkString/</guid><description>mkString trait Collection[A] { def mkString: String def mkString(sep: String): String def mkString(start: String, sep: String, end: String): String } mkString construi uma String juntando a representação textual de cada elemento desta coleção.
Opcionalmente, sep pode ser usado como cola das partes, enquanto start/end podem ser usados ​​como textos de início / fim, respectivamente.</description></item><item><title>nonEmpty</title><link>https://superruzafa.github.io/visual-scala-reference/pt/nonEmpty/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/nonEmpty/</guid><description>nonEmpty trait Collection[A] { def nonEmpty: Boolean } nonEmpty retorna true quando esta coleção possui pelo menos um elemento.
Em coleções vazias, essa função retorna false.</description></item><item><title>orElse</title><link>https://superruzafa.github.io/visual-scala-reference/pt/orElse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/orElse/</guid><description>orElse trait PartialFunction[X, Y] { def orElse(g: PartialFunction[X, Y]): PartialFunction[X, Y] } orElse cria uma função parcial anônima que retorna o valor retornado por essa função parcial.
Para os valores de entrada para os quais essa função parcial não está definida, a função parcial anônima retornará o valor retornado por g.
Se nem esta função nem g estiverem definidos para o valor de entrada, a função anônima emitirá uma exceção MatchError.</description></item><item><title>padTo</title><link>https://superruzafa.github.io/visual-scala-reference/pt/padTo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/padTo/</guid><description>padTo trait Collection[A] { def padTo(m: Int, a: A): Collection[A] } padTo cria uma cópia desta coleção e preencha-a à direita com o valor a até atingir um determinado comprimento m.</description></item><item><title>partition</title><link>https://superruzafa.github.io/visual-scala-reference/pt/partition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/partition/</guid><description>partition trait Collection[A] { def partition(p: (A) =&amp;gt; Boolean): (Collection[A], Collection[A]) } partitioncria duas coleções: uma contendo os elementos que satisfazem o predicado p e os que não o satisfazem, e os retorna em um Tuple2.</description></item><item><title>partitionMap</title><link>https://superruzafa.github.io/visual-scala-reference/pt/partitionMap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/partitionMap/</guid><description>partitionMap trait Collection[A] { def partitionMap[B, C](f: (A) =&amp;gt; Either[B, C]): (Collection[B], Collection[C]) } partitionMap crie duas coleções aplicando a função f a cada elemento da coleção e classificando os valores transformados, dependendo se eles foram agrupados com Left ou Right.</description></item><item><title>patch</title><link>https://superruzafa.github.io/visual-scala-reference/pt/patch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/patch/</guid><description>patch trait Collection[A] { def patch(j: Int, bs: Collection[A], m: Int): Collection[A] } patch cria uma cópia desta coleção, mas substitua os elementos m iniciando no índice j pela coleção bs.</description></item><item><title>permutations</title><link>https://superruzafa.github.io/visual-scala-reference/pt/permutations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/permutations/</guid><description>permutations trait Collection[A] { def permutations: Iterator[Collection[A]] } permutations calcula todas as permutações possíveis dessa coleção e retorna um Iterator para iterar.</description></item><item><title>prefixLength</title><link>https://superruzafa.github.io/visual-scala-reference/pt/prefixLength/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/prefixLength/</guid><description>prefixLength trait Collection[A] { def prefixLength(p: (A) =&amp;gt; Boolean): Int } prefixLength retorna o comprimento do maior prefixo de elementos que satisfazem o predicado p.</description></item><item><title>prepended</title><link>https://superruzafa.github.io/visual-scala-reference/pt/prepended/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/prepended/</guid><description>prepended trait Collection[A] { def prepended[B &amp;gt;: A](b: B): Collection[B] def +:[B &amp;gt;: A](b: B): Collection[B] } prepended cria uma cópia desta coleção adicionando o elemento b no início.</description></item><item><title>prependedAll</title><link>https://superruzafa.github.io/visual-scala-reference/pt/prependedAll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/prependedAll/</guid><description>prependedAll trait Collection[A] { def prependedAll[B &amp;gt;: A](bs: Collection[B]): Collection[B] def ++:[B &amp;gt;: A](bs: Collection[B]): Collection[B] } prependedAll cria uma cópia desta coleção adicionando a coleção bs no início.</description></item><item><title>product</title><link>https://superruzafa.github.io/visual-scala-reference/pt/product/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/product/</guid><description>product trait Collection[A] { def product: A } product calcula o produto dos itens nesta coleção.
Nas coleções vazias, essa função retorna o elemento neutro para a operação do produto do tipo A.</description></item><item><title>range</title><link>https://superruzafa.github.io/visual-scala-reference/pt/range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/range/</guid><description>range object Collection { def range[A](start: A, end: A): Collection[A] def range[A](start: A, end: A, step: A): Collection[A] } range cria uma coleção usando a sequência de valores que começa com start e termina antes de atingir end.
O incremento usado para calcular o próximo valor na sequência pode ser especificado com step.</description></item><item><title>reduce</title><link>https://superruzafa.github.io/visual-scala-reference/pt/reduce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/reduce/</guid><description>reduce trait Collection[A] { def reduce(op: (A, A) =&amp;gt; A): A } reduce aplica o operador binário op aos pares de elementos nesta coleção até que o resultado final seja calculado.
Em coleções vazias, essa função lança uma exceção UnsupportedOperationException.</description></item><item><title>reduceLeft</title><link>https://superruzafa.github.io/visual-scala-reference/pt/reduceLeft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/reduceLeft/</guid><description>reduceLeft trait Collection[A] { def reduceLeft[B :&amp;gt; A](op: (B, A) =&amp;gt; B): B } reduceLeft aplica, da esquerda para a direita, o operador binário op para cada elemento e o resultado da anterior op. A primeira vez que op é aplicada, ela é alimentada com os dois primeiros elementos.
Nas coleções com um único elemento, esse elemento é retornado e o operador binário op não é aplicado.
Em coleções vazias, essa função lança uma exceção UnsupportedOperationException.</description></item><item><title>reduceLeftOption</title><link>https://superruzafa.github.io/visual-scala-reference/pt/reduceLeftOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/reduceLeftOption/</guid><description>reduceLeftOption trait Collection[A] { def reduceLeftOption[B :&amp;gt; A](f: (B, A) =&amp;gt; B): Option[B] } reduceLeftOption aplica, da esquerda para a direita, o operador binário op para cada elemento e o resultado da anterior op. A primeira vez que op é aplicada, ela é alimentada com os dois primeiros elementos. O resultado final é envolto em Some.
Em coleções vazias, essa função retorna None.</description></item><item><title>reduceOption</title><link>https://superruzafa.github.io/visual-scala-reference/pt/reduceOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/reduceOption/</guid><description>reduceOption trait Collection[A] { def reduceOption(op: (A, A) =&amp;gt; A): Option[A] } reduceOption aplique o operador binário op aos pares de elementos nesta coleção até que o resultado final seja calculado e retornado com quebra de linha Some.
Em coleções vazias, essa função retorna None.</description></item><item><title>reduceRight</title><link>https://superruzafa.github.io/visual-scala-reference/pt/reduceRight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/reduceRight/</guid><description>reduceRight trait Collection[A] { def reduceRight[B :&amp;gt; A](op: (A, B) =&amp;gt; B): B } reduceLeft aplica, da direita para a esquerda, o operador binário op a cada elemento e o resultado da anterior op. A primeira vez que op é aplicada, ela é alimentada com os dois últimos elementos.
Nas coleções com um único elemento, esse elemento é retornado e o operador binário op não é aplicado.
Em coleções vazias, essa função lança uma exceção UnsupportedOperationException.</description></item><item><title>reduceRightOption</title><link>https://superruzafa.github.io/visual-scala-reference/pt/reduceRightOption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/reduceRightOption/</guid><description>reduceRightOption trait Collection[A] { def reduceRightOption[B :&amp;gt; A](f: (A, B) =&amp;gt; B): Option[B] } reduceRightOption aplica, da direita para a esquerda, o operador binário op a cada elemento e o resultado da anterior op. A primeira vez que op é aplicada, ela é alimentada com os dois últimos elementos. O resultado final é envolvido com Some.
Em coleções vazias, essa função retorna None.</description></item><item><title>removed</title><link>https://superruzafa.github.io/visual-scala-reference/pt/removed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/removed/</guid><description>removed trait Map[K, V] { def removed(k: K): Map[K, V] } removed cria um novo Map copiando todos os elemento dele mas omitindo o elemento com a chave k.</description></item><item><title>reverse</title><link>https://superruzafa.github.io/visual-scala-reference/pt/reverse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/reverse/</guid><description>reverse trait Collection[A] { def reverse: Collection[A] } reverse cria uma coleção revertendo a ordem dos elementos.</description></item><item><title>reverseMap</title><link>https://superruzafa.github.io/visual-scala-reference/pt/reverseMap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/reverseMap/</guid><description>reverseMap trait Collection[A] { def reverseMap[B](f: (A) =&amp;gt; B): Collection[B] } reverseMap cria uma coleção revertendo a ordem e aplicando uma função de transformação f a cada um dos elementos.</description></item><item><title>runWith</title><link>https://superruzafa.github.io/visual-scala-reference/pt/runWith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/runWith/</guid><description>runWith trait PartialFunction[X, Y] { def runWith[U](g: (Y) =&amp;gt; U): (X) =&amp;gt; Boolean } runWith cria uma função anônima que aplique essa função parcial e, em seguida, g a um valor de entrada, se essa função parcial estiver definida para esse valor, e retorne true.
Para os valores para os quais essa função parcial não está definida, a função anônima retorna false, sem aplicar a função g.</description></item><item><title>sameElements</title><link>https://superruzafa.github.io/visual-scala-reference/pt/sameElements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/sameElements/</guid><description>sameElements trait Collection[A] { def sameElements(as: Collection[A]): Boolean } sameElements Verifica se a coleção tem os mesmos elementos na mesma ordem que a coleção as, e retorna true nesse caso.
Esta função retorna false se pelo menos um elemento não corresponder ao elemento correspondente emas.</description></item><item><title>scanLeft</title><link>https://superruzafa.github.io/visual-scala-reference/pt/scanLeft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/scanLeft/</guid><description>scanLeft trait Collection[A] { def scanLeft[B](z: B)(op: (B, A) =&amp;gt; B): Collection[B] } scanLeft cria uma coleção com os resultados intermediários da aplicação do operador binário op aos elementos dessa coleção, indo da esquerda para a direita. A primeira vez que op é aplicada, ela é alimentada com o valor inicial z.</description></item><item><title>scanRight</title><link>https://superruzafa.github.io/visual-scala-reference/pt/scanRight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/scanRight/</guid><description>scanRight trait Collection[A] { def scanRight[B](z: B)(op: (A, B) =&amp;gt; B): Collection[B] } scanRight cria uma coleção com os resultados intermediários da aplicação do operador binário op aos elementos dessa coleção, indo da direita para a esquerda. A primeira vez que op é aplicada, ela é alimentada com o valor inicial z.</description></item><item><title>search</title><link>https://superruzafa.github.io/visual-scala-reference/pt/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/search/</guid><description>search trait Collection[A] { def search[B &amp;gt;: A](e: B): SearchResult def search[B &amp;gt;: A](e: B, i: Int, j: Int): SearchResult } search procura na coleção o primeiro elemento que é igual (==) ao elemento e e retorna um Found contendo o índice onde foi encontrado.
Se e não pode ser encontrado na coleção, um InsertionPoint contendo o índice que o elemento ocuparia se fosse adicionado à coleção.
A pesquisa pode ser restrita no intervalo [i, j).</description></item><item><title>segmentLength</title><link>https://superruzafa.github.io/visual-scala-reference/pt/segmentLength/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/segmentLength/</guid><description>segmentLength trait Collection[A] { def segmentLength(p: (A) =&amp;gt; Boolean, j: Int): Int } segmentLength retorna o comprimento do maior segmento de elementos começando em j que satisfaz o predicado p.</description></item><item><title>size</title><link>https://superruzafa.github.io/visual-scala-reference/pt/size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/size/</guid><description>size trait Collection[A] { def size: Int } size retorna quantos itens esta coleção possui.</description></item><item><title>slice</title><link>https://superruzafa.github.io/visual-scala-reference/pt/slice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/slice/</guid><description>slice trait Collection[A] { def slice(i: Int, j: Int): Collection[A] } slice cria uma coleção com a sequência de elementos do índice i ao índice j.</description></item><item><title>sliding</title><link>https://superruzafa.github.io/visual-scala-reference/pt/sliding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/sliding/</guid><description>sliding trait Collection[A] { def sliding(m: Int, s: Int): Iterator[Collection[A]] } sliding calcula todas as sub-coleções de elementos m que começam a cada s elementos e retorna um Iterator para iterá-los.</description></item><item><title>sortBy</title><link>https://superruzafa.github.io/visual-scala-reference/pt/sortBy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/sortBy/</guid><description>sortBy trait Collection[A] { def sortBy[W](f: (A) =&amp;gt; W): Collection[A] } sortBy cria uma coleção com os elementos ordenados de acordo com os resultados emitidos pela função f após serem aplicados a cada elemento.</description></item><item><title>sorted</title><link>https://superruzafa.github.io/visual-scala-reference/pt/sorted/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/sorted/</guid><description>sorted trait Collection[A] { def sorted: Collection[A] } sorted crie uma coleção com os elementos ordenados.</description></item><item><title>sortWith</title><link>https://superruzafa.github.io/visual-scala-reference/pt/sortWith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/sortWith/</guid><description>sortWith trait Collection[A] { def sortWith(lt: (A, A) =&amp;gt; Boolean): Collection[A] } sortWith cria uma coleção com os elementos ordenados usando uma função de comparação lt, que deve retornar true quando o primeiro argumento for menor que o segundo e false em caso contrário.</description></item><item><title>span</title><link>https://superruzafa.github.io/visual-scala-reference/pt/span/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/span/</guid><description>span trait Collection[A] { def span(p: (A) =&amp;gt; Boolean): (Collection[A], Collection[A]) } span cria um Tuple2 com duas coleções: uma contendo o maior prefixo de elementos que satisfaz o predicado p e a outra contendo o restante dos elementos.</description></item><item><title>splitAt</title><link>https://superruzafa.github.io/visual-scala-reference/pt/splitAt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/splitAt/</guid><description>splitAt trait Collection[A] { def splitAt(i: Int): (Collection[A], Collection[A]) } splitAt crie um Tuple2 com duas coleções: a primeira contendo todos os elementos cujo índice é menor que i e a outra contendo todos os outros elementos.</description></item><item><title>startsWith</title><link>https://superruzafa.github.io/visual-scala-reference/pt/startsWith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/startsWith/</guid><description>startsWith trait Collection[A] { def startsWith(as: Collection[A]): Boolean def startsWith(as: Collection[A], j: Int): Boolean } startsWith verifique se a coleção as é um prefixo desta coleção, retornando true nesse caso.
A pesquisa pode começar com um deslocamento de índice j.
Se as não for um prefixo dessa coleção, essa função retornará false.</description></item><item><title>sum</title><link>https://superruzafa.github.io/visual-scala-reference/pt/sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/sum/</guid><description>sum trait Collection[A] { def sum: A } sum calcula a soma dos elementos nesta coleção.
Em coleções vazias, essa função retorna o elemento neutro para a operação de soma do tipoA.</description></item><item><title>tabulate</title><link>https://superruzafa.github.io/visual-scala-reference/pt/tabulate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/tabulate/</guid><description>tabulate object Collection { def tabulate[A](n1: Int, ..., nm: Int)(f: (Int, ..., Int): =&amp;gt; A) : Collection[ ... Collection[A] ... ] } tabulate cria uma coleção n-dimensional contendo o resultado da função f aplicada sobre um intervalo de números inteiros.</description></item><item><title>tail</title><link>https://superruzafa.github.io/visual-scala-reference/pt/tail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/tail/</guid><description>tail trait Collection[A] { def tail: Collection[A] } tail retorna todos os elementos desta coleção, exceto o primeiro.
Em coleções vazias, essa função lança uma exceção NoSuchElementException.</description></item><item><title>tails</title><link>https://superruzafa.github.io/visual-scala-reference/pt/tails/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/tails/</guid><description>tails trait Collection[A] { def tails: Iterator[Collection[A]] } tails calcula todos os sufixos possíveis para esta coleção e retorna um Iterator para iterar sobre eles.</description></item><item><title>take</title><link>https://superruzafa.github.io/visual-scala-reference/pt/take/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/take/</guid><description>take trait Collection[A] { def take(i: Int): Collection[A] } take cria uma coleção mantendo os primeiros elementos i desta coleção, descartando o restante.</description></item><item><title>takeRight</title><link>https://superruzafa.github.io/visual-scala-reference/pt/takeRight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/takeRight/</guid><description>takeRight trait Collection[A] { def takeRight(i: Int): Collection[A] } takeRight crie uma coleção mantendo os últimos elementos i desta coleção, descartando o restante.</description></item><item><title>takeWhile</title><link>https://superruzafa.github.io/visual-scala-reference/pt/takeWhile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/takeWhile/</guid><description>takeWhile trait Collection[A] { def takeWhile(p: (A) =&amp;gt; Boolean): Collection[A] } takeWhile cria uma coleção mantendo o prefixo mais longo de elementos que satisfazem o predicado p, descartando o restante.</description></item><item><title>transpose</title><link>https://superruzafa.github.io/visual-scala-reference/pt/transpose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/transpose/</guid><description>transpose trait Collection[A] { def transpose[B]: Collection[Collection[B]] } transpose pega a coleção de m x n elementos e cria uma nova coleção de n x m elementos.
Se nem todas as subcoleções forem do mesmo tamanho, essa função será lançada uma exceção IllegalArgumentException.</description></item><item><title>tupled</title><link>https://superruzafa.github.io/visual-scala-reference/pt/tupled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/tupled/</guid><description>tupled object Function { def tupled[X1, ..., Xn, Y](f: (X1, ..., Xn) =&amp;gt; Y): ((X1, ..., Xn)) =&amp;gt; Y } tupled cria uma função anônima equivalente que aceita uma n-tupla como o único parâmetro e cujos componentes correspondem aos parâmetros dessa função.</description></item><item><title>uncurried</title><link>https://superruzafa.github.io/visual-scala-reference/pt/uncurried/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/uncurried/</guid><description>uncurried object Function { def uncurried[X1, ..., Xn, Y](f: (X1) =&amp;gt; ... =&amp;gt; (Xn) =&amp;gt; Y): (X1, ..., Xn) =&amp;gt; Y } uncurried cria uma função anônima equivalente, que aceita em uma única etapa os parâmetros sucessivamente aceitos pela sequência de funções de ordem superior que começam com a função f.</description></item><item><title>unfold</title><link>https://superruzafa.github.io/visual-scala-reference/pt/unfold/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/unfold/</guid><description>unfold object Collection { def unfold[A, S](s: S)(f: (S) =&amp;gt; Option[(A, S)]): Collection[A] } unfold cria uma coleção pegando cada par de valores retornados pela função f para obter o item atual e calcular o próximo, enquanto a função os devolve envolvidos com Some.
Pare de criar a coleção assim que f retornar None.
A primeira vez que f é aplicado, ele é alimentado com o valor inicial s.</description></item><item><title>union</title><link>https://superruzafa.github.io/visual-scala-reference/pt/union/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/union/</guid><description>union trait Collection[A] { def union(as: Collection[A]): Collection[A] } union calcula a união multiset entre esta coleção e a coleção as.</description></item><item><title>unlift</title><link>https://superruzafa.github.io/visual-scala-reference/pt/unlift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/unlift/</guid><description>unlift object Function { def unlift[X, Y](f: (X) =&amp;gt; Option[Y]): PartialFunction[X, Y] } unlift cria uma função parcial anônima que retorna o valor extraído de Some retornado pela função f.
Se f retornar None, a função anônima lançará um Exceção MatchError.</description></item><item><title>untupled</title><link>https://superruzafa.github.io/visual-scala-reference/pt/untupled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/untupled/</guid><description>untupled object Function { def untupled[X1, ..., Xn, Y](f: ((X1, ..., Xn)) =&amp;gt; Y): (X1, ..., Xn) =&amp;gt; Y } untupled cria uma função anônima equivalente que aceita parâmetros n correspondente a cada um dos componentes da n-tupla aceitos como parâmetro pela função f.</description></item><item><title>unzip</title><link>https://superruzafa.github.io/visual-scala-reference/pt/unzip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/unzip/</guid><description>unzip trait Collection[AB] { def unzip[A, B]: (Collection[A], Collection[B]) } unzip cria uma Tuple2 com duas coleções: a primeira contendo o primeiro componente de cada par de elementos e a segunda contendo o restante.</description></item><item><title>unzip3</title><link>https://superruzafa.github.io/visual-scala-reference/pt/unzip3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/unzip3/</guid><description>unzip3 trait Collection[ABC] { def unzip3[A, B, C]: (Collection[A], Collection[B], Collection[C]) } unzip cria uma Tuple3 com três coleções: a primeira contendo o primeiro componente de cada trio de elementos, a segunda contendo o segundo componente e a terceira contendo o restante.</description></item><item><title>updated</title><link>https://superruzafa.github.io/visual-scala-reference/pt/updated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/updated/</guid><description>updated trait Collection[A] { def updated(i: Int, a: A): Collection[A] } updated cria uma coleção copiando todos os elementos dessa coleção, mas substituindo o elemento indice i pelo valor a.</description></item><item><title>values</title><link>https://superruzafa.github.io/visual-scala-reference/pt/values/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/values/</guid><description>values trait Map[K, V] { def values: Iterable[V] } values cria um Iterator para iterar entre valores do Map..</description></item><item><title>withDefault</title><link>https://superruzafa.github.io/visual-scala-reference/pt/withDefault/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/withDefault/</guid><description>withDefault trait Map[K, V] { def withDefault(f: (K) =&amp;gt; V): Map[K, V] } withDefault cria um Map com os mesmos pares de valores-chave que este Map, mas fornecendo um valor calculado com base nas chaves não encontradas.</description></item><item><title>withDefaultValue</title><link>https://superruzafa.github.io/visual-scala-reference/pt/withDefaultValue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/withDefaultValue/</guid><description>withDefaultValue trait Map[K, V] { def withDefaultValue(v: V): Map[K, V] } withDefaultValue cria um Map com os mesmos pares de valores-chave que este Map, mas fornecendo um valor padrão para as chaves não encontradas.</description></item><item><title>zip</title><link>https://superruzafa.github.io/visual-scala-reference/pt/zip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/zip/</guid><description>zip trait Collection[A] { def zip[B](bs: Collection[B]): Collection[(A, B)] } zip cria uma coleção combinando cada elemento dessa coleção com o elemento que ocupa o mesmo índice em bs, descartando os elementos que não têm um par.</description></item><item><title>zipAll</title><link>https://superruzafa.github.io/visual-scala-reference/pt/zipAll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/zipAll/</guid><description>zipAll trait Collection[A] { def zipAll[B](bs: Collection[B], a: A, b: B): Collection[(A, B)] } zipAll cria uma coleção combinando cada elemento dessa coleção com o elemento que ocupa o mesmo índice em bs, fornecendo valores padrão a ou b para os elementos que não têm um par.</description></item><item><title>zipWithIndex</title><link>https://superruzafa.github.io/visual-scala-reference/pt/zipWithIndex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-scala-reference/pt/zipWithIndex/</guid><description>zipWithIndex trait Collection[A] { def zipWithIndex: Collection[(A, Int)] } zipWithIndex cria uma coleção combinando cada item ao seu índice.</description></item></channel></rss>